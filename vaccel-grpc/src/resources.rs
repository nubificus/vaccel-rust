// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `resources.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:vaccel.CreateSharedObjRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CreateSharedObjRequest {
    // message fields
    // @@protoc_insertion_point(field:vaccel.CreateSharedObjRequest.shared_obj)
    pub shared_obj: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:vaccel.CreateSharedObjRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateSharedObjRequest {
    fn default() -> &'a CreateSharedObjRequest {
        <CreateSharedObjRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateSharedObjRequest {
    pub fn new() -> CreateSharedObjRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "shared_obj",
            |m: &CreateSharedObjRequest| { &m.shared_obj },
            |m: &mut CreateSharedObjRequest| { &mut m.shared_obj },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateSharedObjRequest>(
            "CreateSharedObjRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateSharedObjRequest {
    const NAME: &'static str = "CreateSharedObjRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.shared_obj = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.shared_obj.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.shared_obj);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.shared_obj.is_empty() {
            os.write_bytes(1, &self.shared_obj)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateSharedObjRequest {
        CreateSharedObjRequest::new()
    }

    fn clear(&mut self) {
        self.shared_obj.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateSharedObjRequest {
        static instance: CreateSharedObjRequest = CreateSharedObjRequest {
            shared_obj: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateSharedObjRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateSharedObjRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateSharedObjRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateSharedObjRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:vaccel.CreateSingleModelRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CreateSingleModelRequest {
    // message fields
    // @@protoc_insertion_point(field:vaccel.CreateSingleModelRequest.file)
    pub file: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:vaccel.CreateSingleModelRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateSingleModelRequest {
    fn default() -> &'a CreateSingleModelRequest {
        <CreateSingleModelRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateSingleModelRequest {
    pub fn new() -> CreateSingleModelRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "file",
            |m: &CreateSingleModelRequest| { &m.file },
            |m: &mut CreateSingleModelRequest| { &mut m.file },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateSingleModelRequest>(
            "CreateSingleModelRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateSingleModelRequest {
    const NAME: &'static str = "CreateSingleModelRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.file = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.file.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.file);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.file.is_empty() {
            os.write_bytes(1, &self.file)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateSingleModelRequest {
        CreateSingleModelRequest::new()
    }

    fn clear(&mut self) {
        self.file.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateSingleModelRequest {
        static instance: CreateSingleModelRequest = CreateSingleModelRequest {
            file: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateSingleModelRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateSingleModelRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateSingleModelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateSingleModelRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:vaccel.CreateTensorflowSavedModelRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CreateTensorflowSavedModelRequest {
    // message fields
    // @@protoc_insertion_point(field:vaccel.CreateTensorflowSavedModelRequest.model_pb)
    pub model_pb: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:vaccel.CreateTensorflowSavedModelRequest.checkpoint)
    pub checkpoint: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:vaccel.CreateTensorflowSavedModelRequest.var_index)
    pub var_index: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:vaccel.CreateTensorflowSavedModelRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateTensorflowSavedModelRequest {
    fn default() -> &'a CreateTensorflowSavedModelRequest {
        <CreateTensorflowSavedModelRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateTensorflowSavedModelRequest {
    pub fn new() -> CreateTensorflowSavedModelRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "model_pb",
            |m: &CreateTensorflowSavedModelRequest| { &m.model_pb },
            |m: &mut CreateTensorflowSavedModelRequest| { &mut m.model_pb },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "checkpoint",
            |m: &CreateTensorflowSavedModelRequest| { &m.checkpoint },
            |m: &mut CreateTensorflowSavedModelRequest| { &mut m.checkpoint },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "var_index",
            |m: &CreateTensorflowSavedModelRequest| { &m.var_index },
            |m: &mut CreateTensorflowSavedModelRequest| { &mut m.var_index },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateTensorflowSavedModelRequest>(
            "CreateTensorflowSavedModelRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateTensorflowSavedModelRequest {
    const NAME: &'static str = "CreateTensorflowSavedModelRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.model_pb = is.read_bytes()?;
                },
                18 => {
                    self.checkpoint = is.read_bytes()?;
                },
                26 => {
                    self.var_index = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.model_pb.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.model_pb);
        }
        if !self.checkpoint.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.checkpoint);
        }
        if !self.var_index.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.var_index);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.model_pb.is_empty() {
            os.write_bytes(1, &self.model_pb)?;
        }
        if !self.checkpoint.is_empty() {
            os.write_bytes(2, &self.checkpoint)?;
        }
        if !self.var_index.is_empty() {
            os.write_bytes(3, &self.var_index)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateTensorflowSavedModelRequest {
        CreateTensorflowSavedModelRequest::new()
    }

    fn clear(&mut self) {
        self.model_pb.clear();
        self.checkpoint.clear();
        self.var_index.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateTensorflowSavedModelRequest {
        static instance: CreateTensorflowSavedModelRequest = CreateTensorflowSavedModelRequest {
            model_pb: ::std::vec::Vec::new(),
            checkpoint: ::std::vec::Vec::new(),
            var_index: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateTensorflowSavedModelRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateTensorflowSavedModelRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateTensorflowSavedModelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateTensorflowSavedModelRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:vaccel.CreateCaffeModelRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CreateCaffeModelRequest {
    // message fields
    // @@protoc_insertion_point(field:vaccel.CreateCaffeModelRequest.prototxt)
    pub prototxt: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:vaccel.CreateCaffeModelRequest.binary_model)
    pub binary_model: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:vaccel.CreateCaffeModelRequest.labels)
    pub labels: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:vaccel.CreateCaffeModelRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateCaffeModelRequest {
    fn default() -> &'a CreateCaffeModelRequest {
        <CreateCaffeModelRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateCaffeModelRequest {
    pub fn new() -> CreateCaffeModelRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prototxt",
            |m: &CreateCaffeModelRequest| { &m.prototxt },
            |m: &mut CreateCaffeModelRequest| { &mut m.prototxt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "binary_model",
            |m: &CreateCaffeModelRequest| { &m.binary_model },
            |m: &mut CreateCaffeModelRequest| { &mut m.binary_model },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "labels",
            |m: &CreateCaffeModelRequest| { &m.labels },
            |m: &mut CreateCaffeModelRequest| { &mut m.labels },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateCaffeModelRequest>(
            "CreateCaffeModelRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateCaffeModelRequest {
    const NAME: &'static str = "CreateCaffeModelRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    self.prototxt = is.read_bytes()?;
                },
                26 => {
                    self.binary_model = is.read_bytes()?;
                },
                34 => {
                    self.labels = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.prototxt.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.prototxt);
        }
        if !self.binary_model.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.binary_model);
        }
        if !self.labels.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.labels);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.prototxt.is_empty() {
            os.write_bytes(2, &self.prototxt)?;
        }
        if !self.binary_model.is_empty() {
            os.write_bytes(3, &self.binary_model)?;
        }
        if !self.labels.is_empty() {
            os.write_bytes(4, &self.labels)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateCaffeModelRequest {
        CreateCaffeModelRequest::new()
    }

    fn clear(&mut self) {
        self.prototxt.clear();
        self.binary_model.clear();
        self.labels.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateCaffeModelRequest {
        static instance: CreateCaffeModelRequest = CreateCaffeModelRequest {
            prototxt: ::std::vec::Vec::new(),
            binary_model: ::std::vec::Vec::new(),
            labels: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateCaffeModelRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateCaffeModelRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateCaffeModelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateCaffeModelRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:vaccel.CreateResourceRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CreateResourceRequest {
    // message oneof groups
    pub resource: ::std::option::Option<create_resource_request::Resource>,
    // special fields
    // @@protoc_insertion_point(special_field:vaccel.CreateResourceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateResourceRequest {
    fn default() -> &'a CreateResourceRequest {
        <CreateResourceRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateResourceRequest {
    pub fn new() -> CreateResourceRequest {
        ::std::default::Default::default()
    }

    // .vaccel.CreateSharedObjRequest shared_obj = 0;

    pub fn shared_obj(&self) -> &CreateSharedObjRequest {
        match self.resource {
            ::std::option::Option::Some(create_resource_request::Resource::SharedObj(ref v)) => v,
            _ => <CreateSharedObjRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_shared_obj(&mut self) {
        self.resource = ::std::option::Option::None;
    }

    pub fn has_shared_obj(&self) -> bool {
        match self.resource {
            ::std::option::Option::Some(create_resource_request::Resource::SharedObj(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_shared_obj(&mut self, v: CreateSharedObjRequest) {
        self.resource = ::std::option::Option::Some(create_resource_request::Resource::SharedObj(v))
    }

    // Mutable pointer to the field.
    pub fn mut_shared_obj(&mut self) -> &mut CreateSharedObjRequest {
        if let ::std::option::Option::Some(create_resource_request::Resource::SharedObj(_)) = self.resource {
        } else {
            self.resource = ::std::option::Option::Some(create_resource_request::Resource::SharedObj(CreateSharedObjRequest::new()));
        }
        match self.resource {
            ::std::option::Option::Some(create_resource_request::Resource::SharedObj(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_shared_obj(&mut self) -> CreateSharedObjRequest {
        if self.has_shared_obj() {
            match self.resource.take() {
                ::std::option::Option::Some(create_resource_request::Resource::SharedObj(v)) => v,
                _ => panic!(),
            }
        } else {
            CreateSharedObjRequest::new()
        }
    }

    // .vaccel.CreateSingleModelRequest single_model = 1;

    pub fn single_model(&self) -> &CreateSingleModelRequest {
        match self.resource {
            ::std::option::Option::Some(create_resource_request::Resource::SingleModel(ref v)) => v,
            _ => <CreateSingleModelRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_single_model(&mut self) {
        self.resource = ::std::option::Option::None;
    }

    pub fn has_single_model(&self) -> bool {
        match self.resource {
            ::std::option::Option::Some(create_resource_request::Resource::SingleModel(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_single_model(&mut self, v: CreateSingleModelRequest) {
        self.resource = ::std::option::Option::Some(create_resource_request::Resource::SingleModel(v))
    }

    // Mutable pointer to the field.
    pub fn mut_single_model(&mut self) -> &mut CreateSingleModelRequest {
        if let ::std::option::Option::Some(create_resource_request::Resource::SingleModel(_)) = self.resource {
        } else {
            self.resource = ::std::option::Option::Some(create_resource_request::Resource::SingleModel(CreateSingleModelRequest::new()));
        }
        match self.resource {
            ::std::option::Option::Some(create_resource_request::Resource::SingleModel(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_single_model(&mut self) -> CreateSingleModelRequest {
        if self.has_single_model() {
            match self.resource.take() {
                ::std::option::Option::Some(create_resource_request::Resource::SingleModel(v)) => v,
                _ => panic!(),
            }
        } else {
            CreateSingleModelRequest::new()
        }
    }

    // .vaccel.CreateTensorflowSavedModelRequest tf_saved_model = 2;

    pub fn tf_saved_model(&self) -> &CreateTensorflowSavedModelRequest {
        match self.resource {
            ::std::option::Option::Some(create_resource_request::Resource::TfSavedModel(ref v)) => v,
            _ => <CreateTensorflowSavedModelRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_tf_saved_model(&mut self) {
        self.resource = ::std::option::Option::None;
    }

    pub fn has_tf_saved_model(&self) -> bool {
        match self.resource {
            ::std::option::Option::Some(create_resource_request::Resource::TfSavedModel(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tf_saved_model(&mut self, v: CreateTensorflowSavedModelRequest) {
        self.resource = ::std::option::Option::Some(create_resource_request::Resource::TfSavedModel(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tf_saved_model(&mut self) -> &mut CreateTensorflowSavedModelRequest {
        if let ::std::option::Option::Some(create_resource_request::Resource::TfSavedModel(_)) = self.resource {
        } else {
            self.resource = ::std::option::Option::Some(create_resource_request::Resource::TfSavedModel(CreateTensorflowSavedModelRequest::new()));
        }
        match self.resource {
            ::std::option::Option::Some(create_resource_request::Resource::TfSavedModel(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tf_saved_model(&mut self) -> CreateTensorflowSavedModelRequest {
        if self.has_tf_saved_model() {
            match self.resource.take() {
                ::std::option::Option::Some(create_resource_request::Resource::TfSavedModel(v)) => v,
                _ => panic!(),
            }
        } else {
            CreateTensorflowSavedModelRequest::new()
        }
    }

    // .vaccel.CreateCaffeModelRequest caffe_model = 3;

    pub fn caffe_model(&self) -> &CreateCaffeModelRequest {
        match self.resource {
            ::std::option::Option::Some(create_resource_request::Resource::CaffeModel(ref v)) => v,
            _ => <CreateCaffeModelRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_caffe_model(&mut self) {
        self.resource = ::std::option::Option::None;
    }

    pub fn has_caffe_model(&self) -> bool {
        match self.resource {
            ::std::option::Option::Some(create_resource_request::Resource::CaffeModel(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_caffe_model(&mut self, v: CreateCaffeModelRequest) {
        self.resource = ::std::option::Option::Some(create_resource_request::Resource::CaffeModel(v))
    }

    // Mutable pointer to the field.
    pub fn mut_caffe_model(&mut self) -> &mut CreateCaffeModelRequest {
        if let ::std::option::Option::Some(create_resource_request::Resource::CaffeModel(_)) = self.resource {
        } else {
            self.resource = ::std::option::Option::Some(create_resource_request::Resource::CaffeModel(CreateCaffeModelRequest::new()));
        }
        match self.resource {
            ::std::option::Option::Some(create_resource_request::Resource::CaffeModel(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_caffe_model(&mut self) -> CreateCaffeModelRequest {
        if self.has_caffe_model() {
            match self.resource.take() {
                ::std::option::Option::Some(create_resource_request::Resource::CaffeModel(v)) => v,
                _ => panic!(),
            }
        } else {
            CreateCaffeModelRequest::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CreateSharedObjRequest>(
            "shared_obj",
            CreateResourceRequest::has_shared_obj,
            CreateResourceRequest::shared_obj,
            CreateResourceRequest::mut_shared_obj,
            CreateResourceRequest::set_shared_obj,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CreateSingleModelRequest>(
            "single_model",
            CreateResourceRequest::has_single_model,
            CreateResourceRequest::single_model,
            CreateResourceRequest::mut_single_model,
            CreateResourceRequest::set_single_model,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CreateTensorflowSavedModelRequest>(
            "tf_saved_model",
            CreateResourceRequest::has_tf_saved_model,
            CreateResourceRequest::tf_saved_model,
            CreateResourceRequest::mut_tf_saved_model,
            CreateResourceRequest::set_tf_saved_model,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CreateCaffeModelRequest>(
            "caffe_model",
            CreateResourceRequest::has_caffe_model,
            CreateResourceRequest::caffe_model,
            CreateResourceRequest::mut_caffe_model,
            CreateResourceRequest::set_caffe_model,
        ));
        oneofs.push(create_resource_request::Resource::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateResourceRequest>(
            "CreateResourceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateResourceRequest {
    const NAME: &'static str = "CreateResourceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                2 => {
                    self.resource = ::std::option::Option::Some(create_resource_request::Resource::SharedObj(is.read_message()?));
                },
                10 => {
                    self.resource = ::std::option::Option::Some(create_resource_request::Resource::SingleModel(is.read_message()?));
                },
                18 => {
                    self.resource = ::std::option::Option::Some(create_resource_request::Resource::TfSavedModel(is.read_message()?));
                },
                26 => {
                    self.resource = ::std::option::Option::Some(create_resource_request::Resource::CaffeModel(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.resource {
            match v {
                &create_resource_request::Resource::SharedObj(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &create_resource_request::Resource::SingleModel(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &create_resource_request::Resource::TfSavedModel(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &create_resource_request::Resource::CaffeModel(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.resource {
            match v {
                &create_resource_request::Resource::SharedObj(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(0, v, os)?;
                },
                &create_resource_request::Resource::SingleModel(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &create_resource_request::Resource::TfSavedModel(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &create_resource_request::Resource::CaffeModel(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateResourceRequest {
        CreateResourceRequest::new()
    }

    fn clear(&mut self) {
        self.resource = ::std::option::Option::None;
        self.resource = ::std::option::Option::None;
        self.resource = ::std::option::Option::None;
        self.resource = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateResourceRequest {
        static instance: CreateResourceRequest = CreateResourceRequest {
            resource: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateResourceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateResourceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateResourceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateResourceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CreateResourceRequest`
pub mod create_resource_request {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:vaccel.CreateResourceRequest.resource)
    pub enum Resource {
        // @@protoc_insertion_point(oneof_field:vaccel.CreateResourceRequest.shared_obj)
        SharedObj(super::CreateSharedObjRequest),
        // @@protoc_insertion_point(oneof_field:vaccel.CreateResourceRequest.single_model)
        SingleModel(super::CreateSingleModelRequest),
        // @@protoc_insertion_point(oneof_field:vaccel.CreateResourceRequest.tf_saved_model)
        TfSavedModel(super::CreateTensorflowSavedModelRequest),
        // @@protoc_insertion_point(oneof_field:vaccel.CreateResourceRequest.caffe_model)
        CaffeModel(super::CreateCaffeModelRequest),
    }

    impl ::protobuf::Oneof for Resource {
    }

    impl ::protobuf::OneofFull for Resource {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::CreateResourceRequest as ::protobuf::MessageFull>::descriptor().oneof_by_name("resource").unwrap()).clone()
        }
    }

    impl Resource {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Resource>("resource")
        }
    }
}

// @@protoc_insertion_point(message:vaccel.CreateResourceResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CreateResourceResponse {
    // message fields
    // @@protoc_insertion_point(field:vaccel.CreateResourceResponse.resource_id)
    pub resource_id: i64,
    // special fields
    // @@protoc_insertion_point(special_field:vaccel.CreateResourceResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateResourceResponse {
    fn default() -> &'a CreateResourceResponse {
        <CreateResourceResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateResourceResponse {
    pub fn new() -> CreateResourceResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "resource_id",
            |m: &CreateResourceResponse| { &m.resource_id },
            |m: &mut CreateResourceResponse| { &mut m.resource_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateResourceResponse>(
            "CreateResourceResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateResourceResponse {
    const NAME: &'static str = "CreateResourceResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.resource_id = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.resource_id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.resource_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.resource_id != 0 {
            os.write_int64(1, self.resource_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateResourceResponse {
        CreateResourceResponse::new()
    }

    fn clear(&mut self) {
        self.resource_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateResourceResponse {
        static instance: CreateResourceResponse = CreateResourceResponse {
            resource_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateResourceResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateResourceResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateResourceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateResourceResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:vaccel.RegisterResourceRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RegisterResourceRequest {
    // message fields
    // @@protoc_insertion_point(field:vaccel.RegisterResourceRequest.resource_id)
    pub resource_id: i64,
    // @@protoc_insertion_point(field:vaccel.RegisterResourceRequest.session_id)
    pub session_id: u32,
    // special fields
    // @@protoc_insertion_point(special_field:vaccel.RegisterResourceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisterResourceRequest {
    fn default() -> &'a RegisterResourceRequest {
        <RegisterResourceRequest as ::protobuf::Message>::default_instance()
    }
}

impl RegisterResourceRequest {
    pub fn new() -> RegisterResourceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "resource_id",
            |m: &RegisterResourceRequest| { &m.resource_id },
            |m: &mut RegisterResourceRequest| { &mut m.resource_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "session_id",
            |m: &RegisterResourceRequest| { &m.session_id },
            |m: &mut RegisterResourceRequest| { &mut m.session_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisterResourceRequest>(
            "RegisterResourceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RegisterResourceRequest {
    const NAME: &'static str = "RegisterResourceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.resource_id = is.read_int64()?;
                },
                16 => {
                    self.session_id = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.resource_id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.resource_id);
        }
        if self.session_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.session_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.resource_id != 0 {
            os.write_int64(1, self.resource_id)?;
        }
        if self.session_id != 0 {
            os.write_uint32(2, self.session_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisterResourceRequest {
        RegisterResourceRequest::new()
    }

    fn clear(&mut self) {
        self.resource_id = 0;
        self.session_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisterResourceRequest {
        static instance: RegisterResourceRequest = RegisterResourceRequest {
            resource_id: 0,
            session_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RegisterResourceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RegisterResourceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RegisterResourceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterResourceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:vaccel.UnregisterResourceRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UnregisterResourceRequest {
    // message fields
    // @@protoc_insertion_point(field:vaccel.UnregisterResourceRequest.session_id)
    pub session_id: u32,
    // @@protoc_insertion_point(field:vaccel.UnregisterResourceRequest.resource_id)
    pub resource_id: i64,
    // special fields
    // @@protoc_insertion_point(special_field:vaccel.UnregisterResourceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnregisterResourceRequest {
    fn default() -> &'a UnregisterResourceRequest {
        <UnregisterResourceRequest as ::protobuf::Message>::default_instance()
    }
}

impl UnregisterResourceRequest {
    pub fn new() -> UnregisterResourceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "session_id",
            |m: &UnregisterResourceRequest| { &m.session_id },
            |m: &mut UnregisterResourceRequest| { &mut m.session_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "resource_id",
            |m: &UnregisterResourceRequest| { &m.resource_id },
            |m: &mut UnregisterResourceRequest| { &mut m.resource_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnregisterResourceRequest>(
            "UnregisterResourceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnregisterResourceRequest {
    const NAME: &'static str = "UnregisterResourceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.session_id = is.read_uint32()?;
                },
                16 => {
                    self.resource_id = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.session_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.session_id);
        }
        if self.resource_id != 0 {
            my_size += ::protobuf::rt::int64_size(2, self.resource_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.session_id != 0 {
            os.write_uint32(1, self.session_id)?;
        }
        if self.resource_id != 0 {
            os.write_int64(2, self.resource_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnregisterResourceRequest {
        UnregisterResourceRequest::new()
    }

    fn clear(&mut self) {
        self.session_id = 0;
        self.resource_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnregisterResourceRequest {
        static instance: UnregisterResourceRequest = UnregisterResourceRequest {
            session_id: 0,
            resource_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnregisterResourceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnregisterResourceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnregisterResourceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnregisterResourceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:vaccel.DestroyResourceRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DestroyResourceRequest {
    // message fields
    // @@protoc_insertion_point(field:vaccel.DestroyResourceRequest.resource_id)
    pub resource_id: i64,
    // special fields
    // @@protoc_insertion_point(special_field:vaccel.DestroyResourceRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DestroyResourceRequest {
    fn default() -> &'a DestroyResourceRequest {
        <DestroyResourceRequest as ::protobuf::Message>::default_instance()
    }
}

impl DestroyResourceRequest {
    pub fn new() -> DestroyResourceRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "resource_id",
            |m: &DestroyResourceRequest| { &m.resource_id },
            |m: &mut DestroyResourceRequest| { &mut m.resource_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DestroyResourceRequest>(
            "DestroyResourceRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DestroyResourceRequest {
    const NAME: &'static str = "DestroyResourceRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.resource_id = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.resource_id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.resource_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.resource_id != 0 {
            os.write_int64(1, self.resource_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DestroyResourceRequest {
        DestroyResourceRequest::new()
    }

    fn clear(&mut self) {
        self.resource_id = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DestroyResourceRequest {
        static instance: DestroyResourceRequest = DestroyResourceRequest {
            resource_id: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DestroyResourceRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DestroyResourceRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DestroyResourceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DestroyResourceRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fresources.proto\x12\x06vaccel\"7\n\x16CreateSharedObjRequest\x12\
    \x1d\n\nshared_obj\x18\x01\x20\x01(\x0cR\tsharedObj\".\n\x18CreateSingle\
    ModelRequest\x12\x12\n\x04file\x18\x01\x20\x01(\x0cR\x04file\"{\n!Create\
    TensorflowSavedModelRequest\x12\x19\n\x08model_pb\x18\x01\x20\x01(\x0cR\
    \x07modelPb\x12\x1e\n\ncheckpoint\x18\x02\x20\x01(\x0cR\ncheckpoint\x12\
    \x1b\n\tvar_index\x18\x03\x20\x01(\x0cR\x08varIndex\"p\n\x17CreateCaffeM\
    odelRequest\x12\x1a\n\x08prototxt\x18\x02\x20\x01(\x0cR\x08prototxt\x12!\
    \n\x0cbinary_model\x18\x03\x20\x01(\x0cR\x0bbinaryModel\x12\x16\n\x06lab\
    els\x18\x04\x20\x01(\x0cR\x06labels\"\xc2\x02\n\x15CreateResourceRequest\
    \x12?\n\nshared_obj\x18\0\x20\x01(\x0b2\x1e.vaccel.CreateSharedObjReques\
    tH\0R\tsharedObj\x12E\n\x0csingle_model\x18\x01\x20\x01(\x0b2\x20.vaccel\
    .CreateSingleModelRequestH\0R\x0bsingleModel\x12Q\n\x0etf_saved_model\
    \x18\x02\x20\x01(\x0b2).vaccel.CreateTensorflowSavedModelRequestH\0R\x0c\
    tfSavedModel\x12B\n\x0bcaffe_model\x18\x03\x20\x01(\x0b2\x1f.vaccel.Crea\
    teCaffeModelRequestH\0R\ncaffeModelB\n\n\x08resource\"9\n\x16CreateResou\
    rceResponse\x12\x1f\n\x0bresource_id\x18\x01\x20\x01(\x03R\nresourceId\"\
    Y\n\x17RegisterResourceRequest\x12\x1f\n\x0bresource_id\x18\x01\x20\x01(\
    \x03R\nresourceId\x12\x1d\n\nsession_id\x18\x02\x20\x01(\rR\tsessionId\"\
    [\n\x19UnregisterResourceRequest\x12\x1d\n\nsession_id\x18\x01\x20\x01(\
    \rR\tsessionId\x12\x1f\n\x0bresource_id\x18\x02\x20\x01(\x03R\nresourceI\
    d\"9\n\x16DestroyResourceRequest\x12\x1f\n\x0bresource_id\x18\x01\x20\
    \x01(\x03R\nresourceIdb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(CreateSharedObjRequest::generated_message_descriptor_data());
            messages.push(CreateSingleModelRequest::generated_message_descriptor_data());
            messages.push(CreateTensorflowSavedModelRequest::generated_message_descriptor_data());
            messages.push(CreateCaffeModelRequest::generated_message_descriptor_data());
            messages.push(CreateResourceRequest::generated_message_descriptor_data());
            messages.push(CreateResourceResponse::generated_message_descriptor_data());
            messages.push(RegisterResourceRequest::generated_message_descriptor_data());
            messages.push(UnregisterResourceRequest::generated_message_descriptor_data());
            messages.push(DestroyResourceRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
