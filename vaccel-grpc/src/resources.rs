// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `resources.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct CreateCaffeModelRequest {
    // message fields
    pub prototxt: ::std::vec::Vec<u8>,
    pub binary_model: ::std::vec::Vec<u8>,
    pub labels: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateCaffeModelRequest {
    fn default() -> &'a CreateCaffeModelRequest {
        <CreateCaffeModelRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateCaffeModelRequest {
    pub fn new() -> CreateCaffeModelRequest {
        ::std::default::Default::default()
    }

    // bytes prototxt = 2;


    pub fn get_prototxt(&self) -> &[u8] {
        &self.prototxt
    }
    pub fn clear_prototxt(&mut self) {
        self.prototxt.clear();
    }

    // Param is passed by value, moved
    pub fn set_prototxt(&mut self, v: ::std::vec::Vec<u8>) {
        self.prototxt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prototxt(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.prototxt
    }

    // Take field
    pub fn take_prototxt(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.prototxt, ::std::vec::Vec::new())
    }

    // bytes binary_model = 3;


    pub fn get_binary_model(&self) -> &[u8] {
        &self.binary_model
    }
    pub fn clear_binary_model(&mut self) {
        self.binary_model.clear();
    }

    // Param is passed by value, moved
    pub fn set_binary_model(&mut self, v: ::std::vec::Vec<u8>) {
        self.binary_model = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_binary_model(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.binary_model
    }

    // Take field
    pub fn take_binary_model(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.binary_model, ::std::vec::Vec::new())
    }

    // bytes labels = 4;


    pub fn get_labels(&self) -> &[u8] {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::vec::Vec<u8>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_labels(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.labels, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CreateCaffeModelRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.prototxt)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.binary_model)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.labels)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.prototxt.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.prototxt);
        }
        if !self.binary_model.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.binary_model);
        }
        if !self.labels.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.labels);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.prototxt.is_empty() {
            os.write_bytes(2, &self.prototxt)?;
        }
        if !self.binary_model.is_empty() {
            os.write_bytes(3, &self.binary_model)?;
        }
        if !self.labels.is_empty() {
            os.write_bytes(4, &self.labels)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateCaffeModelRequest {
        CreateCaffeModelRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "prototxt",
                    |m: &CreateCaffeModelRequest| { &m.prototxt },
                    |m: &mut CreateCaffeModelRequest| { &mut m.prototxt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "binary_model",
                    |m: &CreateCaffeModelRequest| { &m.binary_model },
                    |m: &mut CreateCaffeModelRequest| { &mut m.binary_model },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "labels",
                    |m: &CreateCaffeModelRequest| { &m.labels },
                    |m: &mut CreateCaffeModelRequest| { &mut m.labels },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateCaffeModelRequest>(
                    "CreateCaffeModelRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateCaffeModelRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateCaffeModelRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(CreateCaffeModelRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateCaffeModelRequest {
    fn clear(&mut self) {
        self.prototxt.clear();
        self.binary_model.clear();
        self.labels.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateCaffeModelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateCaffeModelRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateTensorflowModelRequest {
    // message fields
    pub model: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateTensorflowModelRequest {
    fn default() -> &'a CreateTensorflowModelRequest {
        <CreateTensorflowModelRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateTensorflowModelRequest {
    pub fn new() -> CreateTensorflowModelRequest {
        ::std::default::Default::default()
    }

    // bytes model = 1;


    pub fn get_model(&self) -> &[u8] {
        &self.model
    }
    pub fn clear_model(&mut self) {
        self.model.clear();
    }

    // Param is passed by value, moved
    pub fn set_model(&mut self, v: ::std::vec::Vec<u8>) {
        self.model = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.model
    }

    // Take field
    pub fn take_model(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.model, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CreateTensorflowModelRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.model)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.model.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.model);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.model.is_empty() {
            os.write_bytes(1, &self.model)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateTensorflowModelRequest {
        CreateTensorflowModelRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "model",
                    |m: &CreateTensorflowModelRequest| { &m.model },
                    |m: &mut CreateTensorflowModelRequest| { &mut m.model },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateTensorflowModelRequest>(
                    "CreateTensorflowModelRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateTensorflowModelRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateTensorflowModelRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(CreateTensorflowModelRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateTensorflowModelRequest {
    fn clear(&mut self) {
        self.model.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateTensorflowModelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateTensorflowModelRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateTensorflowSavedModelRequest {
    // message fields
    pub model_pb: ::std::vec::Vec<u8>,
    pub checkpoint: ::std::vec::Vec<u8>,
    pub var_index: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateTensorflowSavedModelRequest {
    fn default() -> &'a CreateTensorflowSavedModelRequest {
        <CreateTensorflowSavedModelRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateTensorflowSavedModelRequest {
    pub fn new() -> CreateTensorflowSavedModelRequest {
        ::std::default::Default::default()
    }

    // bytes model_pb = 1;


    pub fn get_model_pb(&self) -> &[u8] {
        &self.model_pb
    }
    pub fn clear_model_pb(&mut self) {
        self.model_pb.clear();
    }

    // Param is passed by value, moved
    pub fn set_model_pb(&mut self, v: ::std::vec::Vec<u8>) {
        self.model_pb = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model_pb(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.model_pb
    }

    // Take field
    pub fn take_model_pb(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.model_pb, ::std::vec::Vec::new())
    }

    // bytes checkpoint = 2;


    pub fn get_checkpoint(&self) -> &[u8] {
        &self.checkpoint
    }
    pub fn clear_checkpoint(&mut self) {
        self.checkpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_checkpoint(&mut self, v: ::std::vec::Vec<u8>) {
        self.checkpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_checkpoint(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.checkpoint
    }

    // Take field
    pub fn take_checkpoint(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.checkpoint, ::std::vec::Vec::new())
    }

    // bytes var_index = 3;


    pub fn get_var_index(&self) -> &[u8] {
        &self.var_index
    }
    pub fn clear_var_index(&mut self) {
        self.var_index.clear();
    }

    // Param is passed by value, moved
    pub fn set_var_index(&mut self, v: ::std::vec::Vec<u8>) {
        self.var_index = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_var_index(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.var_index
    }

    // Take field
    pub fn take_var_index(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.var_index, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CreateTensorflowSavedModelRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.model_pb)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.checkpoint)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.var_index)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.model_pb.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.model_pb);
        }
        if !self.checkpoint.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.checkpoint);
        }
        if !self.var_index.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.var_index);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.model_pb.is_empty() {
            os.write_bytes(1, &self.model_pb)?;
        }
        if !self.checkpoint.is_empty() {
            os.write_bytes(2, &self.checkpoint)?;
        }
        if !self.var_index.is_empty() {
            os.write_bytes(3, &self.var_index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateTensorflowSavedModelRequest {
        CreateTensorflowSavedModelRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "model_pb",
                    |m: &CreateTensorflowSavedModelRequest| { &m.model_pb },
                    |m: &mut CreateTensorflowSavedModelRequest| { &mut m.model_pb },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "checkpoint",
                    |m: &CreateTensorflowSavedModelRequest| { &m.checkpoint },
                    |m: &mut CreateTensorflowSavedModelRequest| { &mut m.checkpoint },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "var_index",
                    |m: &CreateTensorflowSavedModelRequest| { &m.var_index },
                    |m: &mut CreateTensorflowSavedModelRequest| { &mut m.var_index },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateTensorflowSavedModelRequest>(
                    "CreateTensorflowSavedModelRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateTensorflowSavedModelRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateTensorflowSavedModelRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(CreateTensorflowSavedModelRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateTensorflowSavedModelRequest {
    fn clear(&mut self) {
        self.model_pb.clear();
        self.checkpoint.clear();
        self.var_index.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateTensorflowSavedModelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateTensorflowSavedModelRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateResourceRequest {
    // message oneof groups
    pub model: ::std::option::Option<CreateResourceRequest_oneof_model>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateResourceRequest {
    fn default() -> &'a CreateResourceRequest {
        <CreateResourceRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum CreateResourceRequest_oneof_model {
    tf(CreateTensorflowModelRequest),
    caffe(CreateCaffeModelRequest),
    tf_saved(CreateTensorflowSavedModelRequest),
}

impl CreateResourceRequest {
    pub fn new() -> CreateResourceRequest {
        ::std::default::Default::default()
    }

    // .vaccel.CreateTensorflowModelRequest tf = 1;


    pub fn get_tf(&self) -> &CreateTensorflowModelRequest {
        match self.model {
            ::std::option::Option::Some(CreateResourceRequest_oneof_model::tf(ref v)) => v,
            _ => CreateTensorflowModelRequest::default_instance(),
        }
    }
    pub fn clear_tf(&mut self) {
        self.model = ::std::option::Option::None;
    }

    pub fn has_tf(&self) -> bool {
        match self.model {
            ::std::option::Option::Some(CreateResourceRequest_oneof_model::tf(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tf(&mut self, v: CreateTensorflowModelRequest) {
        self.model = ::std::option::Option::Some(CreateResourceRequest_oneof_model::tf(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tf(&mut self) -> &mut CreateTensorflowModelRequest {
        if let ::std::option::Option::Some(CreateResourceRequest_oneof_model::tf(_)) = self.model {
        } else {
            self.model = ::std::option::Option::Some(CreateResourceRequest_oneof_model::tf(CreateTensorflowModelRequest::new()));
        }
        match self.model {
            ::std::option::Option::Some(CreateResourceRequest_oneof_model::tf(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tf(&mut self) -> CreateTensorflowModelRequest {
        if self.has_tf() {
            match self.model.take() {
                ::std::option::Option::Some(CreateResourceRequest_oneof_model::tf(v)) => v,
                _ => panic!(),
            }
        } else {
            CreateTensorflowModelRequest::new()
        }
    }

    // .vaccel.CreateCaffeModelRequest caffe = 2;


    pub fn get_caffe(&self) -> &CreateCaffeModelRequest {
        match self.model {
            ::std::option::Option::Some(CreateResourceRequest_oneof_model::caffe(ref v)) => v,
            _ => CreateCaffeModelRequest::default_instance(),
        }
    }
    pub fn clear_caffe(&mut self) {
        self.model = ::std::option::Option::None;
    }

    pub fn has_caffe(&self) -> bool {
        match self.model {
            ::std::option::Option::Some(CreateResourceRequest_oneof_model::caffe(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_caffe(&mut self, v: CreateCaffeModelRequest) {
        self.model = ::std::option::Option::Some(CreateResourceRequest_oneof_model::caffe(v))
    }

    // Mutable pointer to the field.
    pub fn mut_caffe(&mut self) -> &mut CreateCaffeModelRequest {
        if let ::std::option::Option::Some(CreateResourceRequest_oneof_model::caffe(_)) = self.model {
        } else {
            self.model = ::std::option::Option::Some(CreateResourceRequest_oneof_model::caffe(CreateCaffeModelRequest::new()));
        }
        match self.model {
            ::std::option::Option::Some(CreateResourceRequest_oneof_model::caffe(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_caffe(&mut self) -> CreateCaffeModelRequest {
        if self.has_caffe() {
            match self.model.take() {
                ::std::option::Option::Some(CreateResourceRequest_oneof_model::caffe(v)) => v,
                _ => panic!(),
            }
        } else {
            CreateCaffeModelRequest::new()
        }
    }

    // .vaccel.CreateTensorflowSavedModelRequest tf_saved = 3;


    pub fn get_tf_saved(&self) -> &CreateTensorflowSavedModelRequest {
        match self.model {
            ::std::option::Option::Some(CreateResourceRequest_oneof_model::tf_saved(ref v)) => v,
            _ => CreateTensorflowSavedModelRequest::default_instance(),
        }
    }
    pub fn clear_tf_saved(&mut self) {
        self.model = ::std::option::Option::None;
    }

    pub fn has_tf_saved(&self) -> bool {
        match self.model {
            ::std::option::Option::Some(CreateResourceRequest_oneof_model::tf_saved(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tf_saved(&mut self, v: CreateTensorflowSavedModelRequest) {
        self.model = ::std::option::Option::Some(CreateResourceRequest_oneof_model::tf_saved(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tf_saved(&mut self) -> &mut CreateTensorflowSavedModelRequest {
        if let ::std::option::Option::Some(CreateResourceRequest_oneof_model::tf_saved(_)) = self.model {
        } else {
            self.model = ::std::option::Option::Some(CreateResourceRequest_oneof_model::tf_saved(CreateTensorflowSavedModelRequest::new()));
        }
        match self.model {
            ::std::option::Option::Some(CreateResourceRequest_oneof_model::tf_saved(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tf_saved(&mut self) -> CreateTensorflowSavedModelRequest {
        if self.has_tf_saved() {
            match self.model.take() {
                ::std::option::Option::Some(CreateResourceRequest_oneof_model::tf_saved(v)) => v,
                _ => panic!(),
            }
        } else {
            CreateTensorflowSavedModelRequest::new()
        }
    }
}

impl ::protobuf::Message for CreateResourceRequest {
    fn is_initialized(&self) -> bool {
        if let Some(CreateResourceRequest_oneof_model::tf(ref v)) = self.model {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CreateResourceRequest_oneof_model::caffe(ref v)) = self.model {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CreateResourceRequest_oneof_model::tf_saved(ref v)) = self.model {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.model = ::std::option::Option::Some(CreateResourceRequest_oneof_model::tf(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.model = ::std::option::Option::Some(CreateResourceRequest_oneof_model::caffe(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.model = ::std::option::Option::Some(CreateResourceRequest_oneof_model::tf_saved(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.model {
            match v {
                &CreateResourceRequest_oneof_model::tf(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CreateResourceRequest_oneof_model::caffe(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CreateResourceRequest_oneof_model::tf_saved(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.model {
            match v {
                &CreateResourceRequest_oneof_model::tf(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CreateResourceRequest_oneof_model::caffe(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CreateResourceRequest_oneof_model::tf_saved(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateResourceRequest {
        CreateResourceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CreateTensorflowModelRequest>(
                    "tf",
                    CreateResourceRequest::has_tf,
                    CreateResourceRequest::get_tf,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CreateCaffeModelRequest>(
                    "caffe",
                    CreateResourceRequest::has_caffe,
                    CreateResourceRequest::get_caffe,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CreateTensorflowSavedModelRequest>(
                    "tf_saved",
                    CreateResourceRequest::has_tf_saved,
                    CreateResourceRequest::get_tf_saved,
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateResourceRequest>(
                    "CreateResourceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateResourceRequest {
        static mut instance: ::protobuf::lazy::Lazy<CreateResourceRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(CreateResourceRequest::new)
        }
    }
}

impl ::protobuf::Clear for CreateResourceRequest {
    fn clear(&mut self) {
        self.model = ::std::option::Option::None;
        self.model = ::std::option::Option::None;
        self.model = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateResourceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateResourceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateResourceResponse {
    // message fields
    pub resource_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateResourceResponse {
    fn default() -> &'a CreateResourceResponse {
        <CreateResourceResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateResourceResponse {
    pub fn new() -> CreateResourceResponse {
        ::std::default::Default::default()
    }

    // int64 resource_id = 1;


    pub fn get_resource_id(&self) -> i64 {
        self.resource_id
    }
    pub fn clear_resource_id(&mut self) {
        self.resource_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_resource_id(&mut self, v: i64) {
        self.resource_id = v;
    }
}

impl ::protobuf::Message for CreateResourceResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.resource_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.resource_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.resource_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.resource_id != 0 {
            os.write_int64(1, self.resource_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateResourceResponse {
        CreateResourceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "resource_id",
                    |m: &CreateResourceResponse| { &m.resource_id },
                    |m: &mut CreateResourceResponse| { &mut m.resource_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateResourceResponse>(
                    "CreateResourceResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateResourceResponse {
        static mut instance: ::protobuf::lazy::Lazy<CreateResourceResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(CreateResourceResponse::new)
        }
    }
}

impl ::protobuf::Clear for CreateResourceResponse {
    fn clear(&mut self) {
        self.resource_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateResourceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateResourceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RegisterResourceRequest {
    // message fields
    pub resource_id: i64,
    pub session_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisterResourceRequest {
    fn default() -> &'a RegisterResourceRequest {
        <RegisterResourceRequest as ::protobuf::Message>::default_instance()
    }
}

impl RegisterResourceRequest {
    pub fn new() -> RegisterResourceRequest {
        ::std::default::Default::default()
    }

    // int64 resource_id = 1;


    pub fn get_resource_id(&self) -> i64 {
        self.resource_id
    }
    pub fn clear_resource_id(&mut self) {
        self.resource_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_resource_id(&mut self, v: i64) {
        self.resource_id = v;
    }

    // uint32 session_id = 2;


    pub fn get_session_id(&self) -> u32 {
        self.session_id
    }
    pub fn clear_session_id(&mut self) {
        self.session_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u32) {
        self.session_id = v;
    }
}

impl ::protobuf::Message for RegisterResourceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.resource_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.session_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.resource_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.resource_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.session_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.session_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.resource_id != 0 {
            os.write_int64(1, self.resource_id)?;
        }
        if self.session_id != 0 {
            os.write_uint32(2, self.session_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegisterResourceRequest {
        RegisterResourceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "resource_id",
                    |m: &RegisterResourceRequest| { &m.resource_id },
                    |m: &mut RegisterResourceRequest| { &mut m.resource_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "session_id",
                    |m: &RegisterResourceRequest| { &m.session_id },
                    |m: &mut RegisterResourceRequest| { &mut m.session_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<RegisterResourceRequest>(
                    "RegisterResourceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RegisterResourceRequest {
        static mut instance: ::protobuf::lazy::Lazy<RegisterResourceRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(RegisterResourceRequest::new)
        }
    }
}

impl ::protobuf::Clear for RegisterResourceRequest {
    fn clear(&mut self) {
        self.resource_id = 0;
        self.session_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RegisterResourceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterResourceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UnregisterResourceRequest {
    // message fields
    pub session_id: u32,
    pub resource_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnregisterResourceRequest {
    fn default() -> &'a UnregisterResourceRequest {
        <UnregisterResourceRequest as ::protobuf::Message>::default_instance()
    }
}

impl UnregisterResourceRequest {
    pub fn new() -> UnregisterResourceRequest {
        ::std::default::Default::default()
    }

    // uint32 session_id = 1;


    pub fn get_session_id(&self) -> u32 {
        self.session_id
    }
    pub fn clear_session_id(&mut self) {
        self.session_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u32) {
        self.session_id = v;
    }

    // int64 resource_id = 2;


    pub fn get_resource_id(&self) -> i64 {
        self.resource_id
    }
    pub fn clear_resource_id(&mut self) {
        self.resource_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_resource_id(&mut self, v: i64) {
        self.resource_id = v;
    }
}

impl ::protobuf::Message for UnregisterResourceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.session_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.resource_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.session_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.session_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.resource_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.resource_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.session_id != 0 {
            os.write_uint32(1, self.session_id)?;
        }
        if self.resource_id != 0 {
            os.write_int64(2, self.resource_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UnregisterResourceRequest {
        UnregisterResourceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "session_id",
                    |m: &UnregisterResourceRequest| { &m.session_id },
                    |m: &mut UnregisterResourceRequest| { &mut m.session_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "resource_id",
                    |m: &UnregisterResourceRequest| { &m.resource_id },
                    |m: &mut UnregisterResourceRequest| { &mut m.resource_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<UnregisterResourceRequest>(
                    "UnregisterResourceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UnregisterResourceRequest {
        static mut instance: ::protobuf::lazy::Lazy<UnregisterResourceRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(UnregisterResourceRequest::new)
        }
    }
}

impl ::protobuf::Clear for UnregisterResourceRequest {
    fn clear(&mut self) {
        self.session_id = 0;
        self.resource_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnregisterResourceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnregisterResourceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DestroyResourceRequest {
    // message fields
    pub resource_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DestroyResourceRequest {
    fn default() -> &'a DestroyResourceRequest {
        <DestroyResourceRequest as ::protobuf::Message>::default_instance()
    }
}

impl DestroyResourceRequest {
    pub fn new() -> DestroyResourceRequest {
        ::std::default::Default::default()
    }

    // int64 resource_id = 1;


    pub fn get_resource_id(&self) -> i64 {
        self.resource_id
    }
    pub fn clear_resource_id(&mut self) {
        self.resource_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_resource_id(&mut self, v: i64) {
        self.resource_id = v;
    }
}

impl ::protobuf::Message for DestroyResourceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.resource_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.resource_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.resource_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.resource_id != 0 {
            os.write_int64(1, self.resource_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DestroyResourceRequest {
        DestroyResourceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "resource_id",
                    |m: &DestroyResourceRequest| { &m.resource_id },
                    |m: &mut DestroyResourceRequest| { &mut m.resource_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<DestroyResourceRequest>(
                    "DestroyResourceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DestroyResourceRequest {
        static mut instance: ::protobuf::lazy::Lazy<DestroyResourceRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(DestroyResourceRequest::new)
        }
    }
}

impl ::protobuf::Clear for DestroyResourceRequest {
    fn clear(&mut self) {
        self.resource_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DestroyResourceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DestroyResourceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fresources.proto\x12\x06vaccel\"Y\n\x17CreateCaffeModelRequest\x12\
    \x12\n\x08prototxt\x18\x02\x20\x01(\x0cB\0\x12\x16\n\x0cbinary_model\x18\
    \x03\x20\x01(\x0cB\0\x12\x10\n\x06labels\x18\x04\x20\x01(\x0cB\0:\0\"1\n\
    \x1cCreateTensorflowModelRequest\x12\x0f\n\x05model\x18\x01\x20\x01(\x0c\
    B\0:\0\"d\n!CreateTensorflowSavedModelRequest\x12\x12\n\x08model_pb\x18\
    \x01\x20\x01(\x0cB\0\x12\x14\n\ncheckpoint\x18\x02\x20\x01(\x0cB\0\x12\
    \x13\n\tvar_index\x18\x03\x20\x01(\x0cB\0:\0\"\xcd\x01\n\x15CreateResour\
    ceRequest\x124\n\x02tf\x18\x01\x20\x01(\x0b2$.vaccel.CreateTensorflowMod\
    elRequestH\0B\0\x122\n\x05caffe\x18\x02\x20\x01(\x0b2\x1f.vaccel.CreateC\
    affeModelRequestH\0B\0\x12?\n\x08tf_saved\x18\x03\x20\x01(\x0b2).vaccel.\
    CreateTensorflowSavedModelRequestH\0B\0B\x07\n\x05model:\0\"1\n\x16Creat\
    eResourceResponse\x12\x15\n\x0bresource_id\x18\x01\x20\x01(\x03B\0:\0\"H\
    \n\x17RegisterResourceRequest\x12\x15\n\x0bresource_id\x18\x01\x20\x01(\
    \x03B\0\x12\x14\n\nsession_id\x18\x02\x20\x01(\rB\0:\0\"J\n\x19Unregiste\
    rResourceRequest\x12\x14\n\nsession_id\x18\x01\x20\x01(\rB\0\x12\x15\n\
    \x0bresource_id\x18\x02\x20\x01(\x03B\0:\0\"1\n\x16DestroyResourceReques\
    t\x12\x15\n\x0bresource_id\x18\x01\x20\x01(\x03B\0:\0B\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
