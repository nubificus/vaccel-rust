// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `error.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct VaccelError {
    // message oneof groups
    pub error: ::std::option::Option<VaccelError_oneof_error>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VaccelError {
    fn default() -> &'a VaccelError {
        <VaccelError as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum VaccelError_oneof_error {
    vaccel_error(i64),
    agent_error(i64),
}

impl VaccelError {
    pub fn new() -> VaccelError {
        ::std::default::Default::default()
    }

    // int64 vaccel_error = 1;


    pub fn get_vaccel_error(&self) -> i64 {
        match self.error {
            ::std::option::Option::Some(VaccelError_oneof_error::vaccel_error(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_vaccel_error(&mut self) {
        self.error = ::std::option::Option::None;
    }

    pub fn has_vaccel_error(&self) -> bool {
        match self.error {
            ::std::option::Option::Some(VaccelError_oneof_error::vaccel_error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_vaccel_error(&mut self, v: i64) {
        self.error = ::std::option::Option::Some(VaccelError_oneof_error::vaccel_error(v))
    }

    // int64 agent_error = 2;


    pub fn get_agent_error(&self) -> i64 {
        match self.error {
            ::std::option::Option::Some(VaccelError_oneof_error::agent_error(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_agent_error(&mut self) {
        self.error = ::std::option::Option::None;
    }

    pub fn has_agent_error(&self) -> bool {
        match self.error {
            ::std::option::Option::Some(VaccelError_oneof_error::agent_error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_agent_error(&mut self, v: i64) {
        self.error = ::std::option::Option::Some(VaccelError_oneof_error::agent_error(v))
    }
}

impl ::protobuf::Message for VaccelError {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.error = ::std::option::Option::Some(VaccelError_oneof_error::vaccel_error(is.read_int64()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.error = ::std::option::Option::Some(VaccelError_oneof_error::agent_error(is.read_int64()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.error {
            match v {
                &VaccelError_oneof_error::vaccel_error(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &VaccelError_oneof_error::agent_error(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.error {
            match v {
                &VaccelError_oneof_error::vaccel_error(v) => {
                    os.write_int64(1, v)?;
                },
                &VaccelError_oneof_error::agent_error(v) => {
                    os.write_int64(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VaccelError {
        VaccelError::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                "vaccel_error",
                VaccelError::has_vaccel_error,
                VaccelError::get_vaccel_error,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                "agent_error",
                VaccelError::has_agent_error,
                VaccelError::get_agent_error,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VaccelError>(
                "VaccelError",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VaccelError {
        static instance: ::protobuf::rt::LazyV2<VaccelError> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VaccelError::new)
    }
}

impl ::protobuf::Clear for VaccelError {
    fn clear(&mut self) {
        self.error = ::std::option::Option::None;
        self.error = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VaccelError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VaccelError {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0berror.proto\x12\x06vaccel\"d\n\x0bVaccelError\x12%\n\x0cvaccel_err\
    or\x18\x01\x20\x01(\x03H\0R\x0bvaccelErrorB\0\x12#\n\x0bagent_error\x18\
    \x02\x20\x01(\x03H\0R\nagentErrorB\0B\x07\n\x05error:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
