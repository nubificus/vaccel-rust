// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct TensorflowModelLoadRequest {
    // message fields
    pub session_id: u32,
    pub model_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TensorflowModelLoadRequest {
    fn default() -> &'a TensorflowModelLoadRequest {
        <TensorflowModelLoadRequest as ::protobuf::Message>::default_instance()
    }
}

impl TensorflowModelLoadRequest {
    pub fn new() -> TensorflowModelLoadRequest {
        ::std::default::Default::default()
    }

    // uint32 session_id = 1;


    pub fn get_session_id(&self) -> u32 {
        self.session_id
    }
    pub fn clear_session_id(&mut self) {
        self.session_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u32) {
        self.session_id = v;
    }

    // int64 model_id = 2;


    pub fn get_model_id(&self) -> i64 {
        self.model_id
    }
    pub fn clear_model_id(&mut self) {
        self.model_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_model_id(&mut self, v: i64) {
        self.model_id = v;
    }
}

impl ::protobuf::Message for TensorflowModelLoadRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.session_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.model_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.session_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.session_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.model_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.model_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.session_id != 0 {
            os.write_uint32(1, self.session_id)?;
        }
        if self.model_id != 0 {
            os.write_int64(2, self.model_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TensorflowModelLoadRequest {
        TensorflowModelLoadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "session_id",
                    |m: &TensorflowModelLoadRequest| { &m.session_id },
                    |m: &mut TensorflowModelLoadRequest| { &mut m.session_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "model_id",
                    |m: &TensorflowModelLoadRequest| { &m.model_id },
                    |m: &mut TensorflowModelLoadRequest| { &mut m.model_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<TensorflowModelLoadRequest>(
                    "TensorflowModelLoadRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TensorflowModelLoadRequest {
        static mut instance: ::protobuf::lazy::Lazy<TensorflowModelLoadRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(TensorflowModelLoadRequest::new)
        }
    }
}

impl ::protobuf::Clear for TensorflowModelLoadRequest {
    fn clear(&mut self) {
        self.session_id = 0;
        self.model_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TensorflowModelLoadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TensorflowModelLoadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TensorflowModelLoadResponse {
    // message oneof groups
    pub result: ::std::option::Option<TensorflowModelLoadResponse_oneof_result>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TensorflowModelLoadResponse {
    fn default() -> &'a TensorflowModelLoadResponse {
        <TensorflowModelLoadResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum TensorflowModelLoadResponse_oneof_result {
    graph_def(::std::vec::Vec<u8>),
    error(super::error::VaccelError),
}

impl TensorflowModelLoadResponse {
    pub fn new() -> TensorflowModelLoadResponse {
        ::std::default::Default::default()
    }

    // bytes graph_def = 1;


    pub fn get_graph_def(&self) -> &[u8] {
        match self.result {
            ::std::option::Option::Some(TensorflowModelLoadResponse_oneof_result::graph_def(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_graph_def(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_graph_def(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(TensorflowModelLoadResponse_oneof_result::graph_def(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_graph_def(&mut self, v: ::std::vec::Vec<u8>) {
        self.result = ::std::option::Option::Some(TensorflowModelLoadResponse_oneof_result::graph_def(v))
    }

    // Mutable pointer to the field.
    pub fn mut_graph_def(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(TensorflowModelLoadResponse_oneof_result::graph_def(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(TensorflowModelLoadResponse_oneof_result::graph_def(::std::vec::Vec::new()));
        }
        match self.result {
            ::std::option::Option::Some(TensorflowModelLoadResponse_oneof_result::graph_def(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_graph_def(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_graph_def() {
            match self.result.take() {
                ::std::option::Option::Some(TensorflowModelLoadResponse_oneof_result::graph_def(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .vaccel.VaccelError error = 2;


    pub fn get_error(&self) -> &super::error::VaccelError {
        match self.result {
            ::std::option::Option::Some(TensorflowModelLoadResponse_oneof_result::error(ref v)) => v,
            _ => super::error::VaccelError::default_instance(),
        }
    }
    pub fn clear_error(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(TensorflowModelLoadResponse_oneof_result::error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: super::error::VaccelError) {
        self.result = ::std::option::Option::Some(TensorflowModelLoadResponse_oneof_result::error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_error(&mut self) -> &mut super::error::VaccelError {
        if let ::std::option::Option::Some(TensorflowModelLoadResponse_oneof_result::error(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(TensorflowModelLoadResponse_oneof_result::error(super::error::VaccelError::new()));
        }
        match self.result {
            ::std::option::Option::Some(TensorflowModelLoadResponse_oneof_result::error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_error(&mut self) -> super::error::VaccelError {
        if self.has_error() {
            match self.result.take() {
                ::std::option::Option::Some(TensorflowModelLoadResponse_oneof_result::error(v)) => v,
                _ => panic!(),
            }
        } else {
            super::error::VaccelError::new()
        }
    }
}

impl ::protobuf::Message for TensorflowModelLoadResponse {
    fn is_initialized(&self) -> bool {
        if let Some(TensorflowModelLoadResponse_oneof_result::error(ref v)) = self.result {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = ::std::option::Option::Some(TensorflowModelLoadResponse_oneof_result::graph_def(is.read_bytes()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = ::std::option::Option::Some(TensorflowModelLoadResponse_oneof_result::error(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &TensorflowModelLoadResponse_oneof_result::graph_def(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                },
                &TensorflowModelLoadResponse_oneof_result::error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &TensorflowModelLoadResponse_oneof_result::graph_def(ref v) => {
                    os.write_bytes(1, v)?;
                },
                &TensorflowModelLoadResponse_oneof_result::error(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TensorflowModelLoadResponse {
        TensorflowModelLoadResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "graph_def",
                    TensorflowModelLoadResponse::has_graph_def,
                    TensorflowModelLoadResponse::get_graph_def,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::error::VaccelError>(
                    "error",
                    TensorflowModelLoadResponse::has_error,
                    TensorflowModelLoadResponse::get_error,
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<TensorflowModelLoadResponse>(
                    "TensorflowModelLoadResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TensorflowModelLoadResponse {
        static mut instance: ::protobuf::lazy::Lazy<TensorflowModelLoadResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(TensorflowModelLoadResponse::new)
        }
    }
}

impl ::protobuf::Clear for TensorflowModelLoadResponse {
    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TensorflowModelLoadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TensorflowModelLoadResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TFTensor {
    // message fields
    pub data: ::std::vec::Vec<u8>,
    pub dims: ::std::vec::Vec<u64>,
    pub field_type: TFDataType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TFTensor {
    fn default() -> &'a TFTensor {
        <TFTensor as ::protobuf::Message>::default_instance()
    }
}

impl TFTensor {
    pub fn new() -> TFTensor {
        ::std::default::Default::default()
    }

    // bytes data = 1;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // repeated uint64 dims = 2;


    pub fn get_dims(&self) -> &[u64] {
        &self.dims
    }
    pub fn clear_dims(&mut self) {
        self.dims.clear();
    }

    // Param is passed by value, moved
    pub fn set_dims(&mut self, v: ::std::vec::Vec<u64>) {
        self.dims = v;
    }

    // Mutable pointer to the field.
    pub fn mut_dims(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.dims
    }

    // Take field
    pub fn take_dims(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.dims, ::std::vec::Vec::new())
    }

    // .vaccel.TFDataType type = 3;


    pub fn get_field_type(&self) -> TFDataType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = TFDataType::UNUSED;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: TFDataType) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for TFTensor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.dims)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        for value in &self.dims {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.field_type != TFDataType::UNUSED {
            my_size += ::protobuf::rt::enum_size(3, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        for v in &self.dims {
            os.write_uint64(2, *v)?;
        };
        if self.field_type != TFDataType::UNUSED {
            os.write_enum(3, self.field_type.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TFTensor {
        TFTensor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &TFTensor| { &m.data },
                    |m: &mut TFTensor| { &mut m.data },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "dims",
                    |m: &TFTensor| { &m.dims },
                    |m: &mut TFTensor| { &mut m.dims },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TFDataType>>(
                    "type",
                    |m: &TFTensor| { &m.field_type },
                    |m: &mut TFTensor| { &mut m.field_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<TFTensor>(
                    "TFTensor",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TFTensor {
        static mut instance: ::protobuf::lazy::Lazy<TFTensor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(TFTensor::new)
        }
    }
}

impl ::protobuf::Clear for TFTensor {
    fn clear(&mut self) {
        self.data.clear();
        self.dims.clear();
        self.field_type = TFDataType::UNUSED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TFTensor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TFTensor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TFNode {
    // message fields
    pub name: ::std::string::String,
    pub id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TFNode {
    fn default() -> &'a TFNode {
        <TFNode as ::protobuf::Message>::default_instance()
    }
}

impl TFNode {
    pub fn new() -> TFNode {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int64 id = 2;


    pub fn get_id(&self) -> i64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }
}

impl ::protobuf::Message for TFNode {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.id != 0 {
            os.write_int64(2, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TFNode {
        TFNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &TFNode| { &m.name },
                    |m: &mut TFNode| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "id",
                    |m: &TFNode| { &m.id },
                    |m: &mut TFNode| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<TFNode>(
                    "TFNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TFNode {
        static mut instance: ::protobuf::lazy::Lazy<TFNode> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(TFNode::new)
        }
    }
}

impl ::protobuf::Clear for TFNode {
    fn clear(&mut self) {
        self.name.clear();
        self.id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TFNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TFNode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TensorflowModelRunRequest {
    // message fields
    pub session_id: u32,
    pub model_id: i64,
    pub run_options: ::std::vec::Vec<u8>,
    pub in_nodes: ::protobuf::RepeatedField<TFNode>,
    pub in_tensors: ::protobuf::RepeatedField<TFTensor>,
    pub out_nodes: ::protobuf::RepeatedField<TFNode>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TensorflowModelRunRequest {
    fn default() -> &'a TensorflowModelRunRequest {
        <TensorflowModelRunRequest as ::protobuf::Message>::default_instance()
    }
}

impl TensorflowModelRunRequest {
    pub fn new() -> TensorflowModelRunRequest {
        ::std::default::Default::default()
    }

    // uint32 session_id = 1;


    pub fn get_session_id(&self) -> u32 {
        self.session_id
    }
    pub fn clear_session_id(&mut self) {
        self.session_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u32) {
        self.session_id = v;
    }

    // int64 model_id = 2;


    pub fn get_model_id(&self) -> i64 {
        self.model_id
    }
    pub fn clear_model_id(&mut self) {
        self.model_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_model_id(&mut self, v: i64) {
        self.model_id = v;
    }

    // bytes run_options = 3;


    pub fn get_run_options(&self) -> &[u8] {
        &self.run_options
    }
    pub fn clear_run_options(&mut self) {
        self.run_options.clear();
    }

    // Param is passed by value, moved
    pub fn set_run_options(&mut self, v: ::std::vec::Vec<u8>) {
        self.run_options = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_run_options(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.run_options
    }

    // Take field
    pub fn take_run_options(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.run_options, ::std::vec::Vec::new())
    }

    // repeated .vaccel.TFNode in_nodes = 4;


    pub fn get_in_nodes(&self) -> &[TFNode] {
        &self.in_nodes
    }
    pub fn clear_in_nodes(&mut self) {
        self.in_nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_in_nodes(&mut self, v: ::protobuf::RepeatedField<TFNode>) {
        self.in_nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_in_nodes(&mut self) -> &mut ::protobuf::RepeatedField<TFNode> {
        &mut self.in_nodes
    }

    // Take field
    pub fn take_in_nodes(&mut self) -> ::protobuf::RepeatedField<TFNode> {
        ::std::mem::replace(&mut self.in_nodes, ::protobuf::RepeatedField::new())
    }

    // repeated .vaccel.TFTensor in_tensors = 5;


    pub fn get_in_tensors(&self) -> &[TFTensor] {
        &self.in_tensors
    }
    pub fn clear_in_tensors(&mut self) {
        self.in_tensors.clear();
    }

    // Param is passed by value, moved
    pub fn set_in_tensors(&mut self, v: ::protobuf::RepeatedField<TFTensor>) {
        self.in_tensors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_in_tensors(&mut self) -> &mut ::protobuf::RepeatedField<TFTensor> {
        &mut self.in_tensors
    }

    // Take field
    pub fn take_in_tensors(&mut self) -> ::protobuf::RepeatedField<TFTensor> {
        ::std::mem::replace(&mut self.in_tensors, ::protobuf::RepeatedField::new())
    }

    // repeated .vaccel.TFNode out_nodes = 6;


    pub fn get_out_nodes(&self) -> &[TFNode] {
        &self.out_nodes
    }
    pub fn clear_out_nodes(&mut self) {
        self.out_nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_out_nodes(&mut self, v: ::protobuf::RepeatedField<TFNode>) {
        self.out_nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_out_nodes(&mut self) -> &mut ::protobuf::RepeatedField<TFNode> {
        &mut self.out_nodes
    }

    // Take field
    pub fn take_out_nodes(&mut self) -> ::protobuf::RepeatedField<TFNode> {
        ::std::mem::replace(&mut self.out_nodes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TensorflowModelRunRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.in_nodes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.in_tensors {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.out_nodes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.session_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.model_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.run_options)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.in_nodes)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.in_tensors)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.out_nodes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.session_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.session_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.model_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.model_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.run_options.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.run_options);
        }
        for value in &self.in_nodes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.in_tensors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.out_nodes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.session_id != 0 {
            os.write_uint32(1, self.session_id)?;
        }
        if self.model_id != 0 {
            os.write_int64(2, self.model_id)?;
        }
        if !self.run_options.is_empty() {
            os.write_bytes(3, &self.run_options)?;
        }
        for v in &self.in_nodes {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.in_tensors {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.out_nodes {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TensorflowModelRunRequest {
        TensorflowModelRunRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "session_id",
                    |m: &TensorflowModelRunRequest| { &m.session_id },
                    |m: &mut TensorflowModelRunRequest| { &mut m.session_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "model_id",
                    |m: &TensorflowModelRunRequest| { &m.model_id },
                    |m: &mut TensorflowModelRunRequest| { &mut m.model_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "run_options",
                    |m: &TensorflowModelRunRequest| { &m.run_options },
                    |m: &mut TensorflowModelRunRequest| { &mut m.run_options },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TFNode>>(
                    "in_nodes",
                    |m: &TensorflowModelRunRequest| { &m.in_nodes },
                    |m: &mut TensorflowModelRunRequest| { &mut m.in_nodes },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TFTensor>>(
                    "in_tensors",
                    |m: &TensorflowModelRunRequest| { &m.in_tensors },
                    |m: &mut TensorflowModelRunRequest| { &mut m.in_tensors },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TFNode>>(
                    "out_nodes",
                    |m: &TensorflowModelRunRequest| { &m.out_nodes },
                    |m: &mut TensorflowModelRunRequest| { &mut m.out_nodes },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<TensorflowModelRunRequest>(
                    "TensorflowModelRunRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TensorflowModelRunRequest {
        static mut instance: ::protobuf::lazy::Lazy<TensorflowModelRunRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(TensorflowModelRunRequest::new)
        }
    }
}

impl ::protobuf::Clear for TensorflowModelRunRequest {
    fn clear(&mut self) {
        self.session_id = 0;
        self.model_id = 0;
        self.run_options.clear();
        self.in_nodes.clear();
        self.in_tensors.clear();
        self.out_nodes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TensorflowModelRunRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TensorflowModelRunRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InferenceResult {
    // message fields
    pub out_tensors: ::protobuf::RepeatedField<TFTensor>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InferenceResult {
    fn default() -> &'a InferenceResult {
        <InferenceResult as ::protobuf::Message>::default_instance()
    }
}

impl InferenceResult {
    pub fn new() -> InferenceResult {
        ::std::default::Default::default()
    }

    // repeated .vaccel.TFTensor out_tensors = 1;


    pub fn get_out_tensors(&self) -> &[TFTensor] {
        &self.out_tensors
    }
    pub fn clear_out_tensors(&mut self) {
        self.out_tensors.clear();
    }

    // Param is passed by value, moved
    pub fn set_out_tensors(&mut self, v: ::protobuf::RepeatedField<TFTensor>) {
        self.out_tensors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_out_tensors(&mut self) -> &mut ::protobuf::RepeatedField<TFTensor> {
        &mut self.out_tensors
    }

    // Take field
    pub fn take_out_tensors(&mut self) -> ::protobuf::RepeatedField<TFTensor> {
        ::std::mem::replace(&mut self.out_tensors, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for InferenceResult {
    fn is_initialized(&self) -> bool {
        for v in &self.out_tensors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.out_tensors)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.out_tensors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.out_tensors {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InferenceResult {
        InferenceResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TFTensor>>(
                    "out_tensors",
                    |m: &InferenceResult| { &m.out_tensors },
                    |m: &mut InferenceResult| { &mut m.out_tensors },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<InferenceResult>(
                    "InferenceResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InferenceResult {
        static mut instance: ::protobuf::lazy::Lazy<InferenceResult> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(InferenceResult::new)
        }
    }
}

impl ::protobuf::Clear for InferenceResult {
    fn clear(&mut self) {
        self.out_tensors.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InferenceResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InferenceResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TensorflowModelRunResponse {
    // message oneof groups
    pub result: ::std::option::Option<TensorflowModelRunResponse_oneof_result>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TensorflowModelRunResponse {
    fn default() -> &'a TensorflowModelRunResponse {
        <TensorflowModelRunResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum TensorflowModelRunResponse_oneof_result {
    error(super::error::VaccelError),
    result(InferenceResult),
}

impl TensorflowModelRunResponse {
    pub fn new() -> TensorflowModelRunResponse {
        ::std::default::Default::default()
    }

    // .vaccel.VaccelError error = 1;


    pub fn get_error(&self) -> &super::error::VaccelError {
        match self.result {
            ::std::option::Option::Some(TensorflowModelRunResponse_oneof_result::error(ref v)) => v,
            _ => super::error::VaccelError::default_instance(),
        }
    }
    pub fn clear_error(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(TensorflowModelRunResponse_oneof_result::error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: super::error::VaccelError) {
        self.result = ::std::option::Option::Some(TensorflowModelRunResponse_oneof_result::error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_error(&mut self) -> &mut super::error::VaccelError {
        if let ::std::option::Option::Some(TensorflowModelRunResponse_oneof_result::error(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(TensorflowModelRunResponse_oneof_result::error(super::error::VaccelError::new()));
        }
        match self.result {
            ::std::option::Option::Some(TensorflowModelRunResponse_oneof_result::error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_error(&mut self) -> super::error::VaccelError {
        if self.has_error() {
            match self.result.take() {
                ::std::option::Option::Some(TensorflowModelRunResponse_oneof_result::error(v)) => v,
                _ => panic!(),
            }
        } else {
            super::error::VaccelError::new()
        }
    }

    // .vaccel.InferenceResult result = 2;


    pub fn get_result(&self) -> &InferenceResult {
        match self.result {
            ::std::option::Option::Some(TensorflowModelRunResponse_oneof_result::result(ref v)) => v,
            _ => InferenceResult::default_instance(),
        }
    }
    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(TensorflowModelRunResponse_oneof_result::result(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: InferenceResult) {
        self.result = ::std::option::Option::Some(TensorflowModelRunResponse_oneof_result::result(v))
    }

    // Mutable pointer to the field.
    pub fn mut_result(&mut self) -> &mut InferenceResult {
        if let ::std::option::Option::Some(TensorflowModelRunResponse_oneof_result::result(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(TensorflowModelRunResponse_oneof_result::result(InferenceResult::new()));
        }
        match self.result {
            ::std::option::Option::Some(TensorflowModelRunResponse_oneof_result::result(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_result(&mut self) -> InferenceResult {
        if self.has_result() {
            match self.result.take() {
                ::std::option::Option::Some(TensorflowModelRunResponse_oneof_result::result(v)) => v,
                _ => panic!(),
            }
        } else {
            InferenceResult::new()
        }
    }
}

impl ::protobuf::Message for TensorflowModelRunResponse {
    fn is_initialized(&self) -> bool {
        if let Some(TensorflowModelRunResponse_oneof_result::error(ref v)) = self.result {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TensorflowModelRunResponse_oneof_result::result(ref v)) = self.result {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = ::std::option::Option::Some(TensorflowModelRunResponse_oneof_result::error(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = ::std::option::Option::Some(TensorflowModelRunResponse_oneof_result::result(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &TensorflowModelRunResponse_oneof_result::error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TensorflowModelRunResponse_oneof_result::result(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &TensorflowModelRunResponse_oneof_result::error(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TensorflowModelRunResponse_oneof_result::result(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TensorflowModelRunResponse {
        TensorflowModelRunResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::error::VaccelError>(
                    "error",
                    TensorflowModelRunResponse::has_error,
                    TensorflowModelRunResponse::get_error,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, InferenceResult>(
                    "result",
                    TensorflowModelRunResponse::has_result,
                    TensorflowModelRunResponse::get_result,
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<TensorflowModelRunResponse>(
                    "TensorflowModelRunResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TensorflowModelRunResponse {
        static mut instance: ::protobuf::lazy::Lazy<TensorflowModelRunResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(TensorflowModelRunResponse::new)
        }
    }
}

impl ::protobuf::Clear for TensorflowModelRunResponse {
    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TensorflowModelRunResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TensorflowModelRunResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TFDataType {
    UNUSED = 0,
    FLOAT = 1,
    DOUBLE = 2,
    INT32 = 3,
    UINT8 = 4,
    INT16 = 5,
    INT8 = 6,
    STRING = 7,
    COMPLEX = 8,
    INT64 = 9,
    BOOL = 10,
    QINT8 = 11,
    QUINT8 = 12,
    QINT32 = 13,
    BFLOAT16 = 14,
    QINT16 = 15,
    QUINT16 = 16,
    UINT16 = 17,
    COMPLEX128 = 18,
    HALF = 19,
    RESOURCE = 20,
    VARIANT = 21,
    UINT32 = 22,
    UINT64 = 23,
}

impl ::protobuf::ProtobufEnum for TFDataType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TFDataType> {
        match value {
            0 => ::std::option::Option::Some(TFDataType::UNUSED),
            1 => ::std::option::Option::Some(TFDataType::FLOAT),
            2 => ::std::option::Option::Some(TFDataType::DOUBLE),
            3 => ::std::option::Option::Some(TFDataType::INT32),
            4 => ::std::option::Option::Some(TFDataType::UINT8),
            5 => ::std::option::Option::Some(TFDataType::INT16),
            6 => ::std::option::Option::Some(TFDataType::INT8),
            7 => ::std::option::Option::Some(TFDataType::STRING),
            8 => ::std::option::Option::Some(TFDataType::COMPLEX),
            9 => ::std::option::Option::Some(TFDataType::INT64),
            10 => ::std::option::Option::Some(TFDataType::BOOL),
            11 => ::std::option::Option::Some(TFDataType::QINT8),
            12 => ::std::option::Option::Some(TFDataType::QUINT8),
            13 => ::std::option::Option::Some(TFDataType::QINT32),
            14 => ::std::option::Option::Some(TFDataType::BFLOAT16),
            15 => ::std::option::Option::Some(TFDataType::QINT16),
            16 => ::std::option::Option::Some(TFDataType::QUINT16),
            17 => ::std::option::Option::Some(TFDataType::UINT16),
            18 => ::std::option::Option::Some(TFDataType::COMPLEX128),
            19 => ::std::option::Option::Some(TFDataType::HALF),
            20 => ::std::option::Option::Some(TFDataType::RESOURCE),
            21 => ::std::option::Option::Some(TFDataType::VARIANT),
            22 => ::std::option::Option::Some(TFDataType::UINT32),
            23 => ::std::option::Option::Some(TFDataType::UINT64),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TFDataType] = &[
            TFDataType::UNUSED,
            TFDataType::FLOAT,
            TFDataType::DOUBLE,
            TFDataType::INT32,
            TFDataType::UINT8,
            TFDataType::INT16,
            TFDataType::INT8,
            TFDataType::STRING,
            TFDataType::COMPLEX,
            TFDataType::INT64,
            TFDataType::BOOL,
            TFDataType::QINT8,
            TFDataType::QUINT8,
            TFDataType::QINT32,
            TFDataType::BFLOAT16,
            TFDataType::QINT16,
            TFDataType::QUINT16,
            TFDataType::UINT16,
            TFDataType::COMPLEX128,
            TFDataType::HALF,
            TFDataType::RESOURCE,
            TFDataType::VARIANT,
            TFDataType::UINT32,
            TFDataType::UINT64,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new_pb_name::<TFDataType>("TFDataType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TFDataType {
}

impl ::std::default::Default for TFDataType {
    fn default() -> Self {
        TFDataType::UNUSED
    }
}

impl ::protobuf::reflect::ProtobufValue for TFDataType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10tensorflow.proto\x12\x06vaccel\"H\n\x1aTensorflowModelLoadRequest\
    \x12\x14\n\nsession_id\x18\x01\x20\x01(\rB\0\x12\x12\n\x08model_id\x18\
    \x02\x20\x01(\x03B\0:\0\"h\n\x1bTensorflowModelLoadResponse\x12\x15\n\tg\
    raph_def\x18\x01\x20\x01(\x0cH\0B\0\x12&\n\x05error\x18\x02\x20\x01(\x0b\
    2\x13.vaccel.VaccelErrorH\0B\0B\x08\n\x06result:\0\"P\n\x08TFTensor\x12\
    \x0e\n\x04data\x18\x01\x20\x01(\x0cB\0\x12\x0e\n\x04dims\x18\x02\x20\x03\
    (\x04B\0\x12\"\n\x04type\x18\x03\x20\x01(\x0e2\x12.vaccel.TFDataTypeB\0:\
    \0\"(\n\x06TFNode\x12\x0e\n\x04name\x18\x01\x20\x01(\tB\0\x12\x0c\n\x02i\
    d\x18\x02\x20\x01(\x03B\0:\0\"\xcf\x01\n\x19TensorflowModelRunRequest\
    \x12\x14\n\nsession_id\x18\x01\x20\x01(\rB\0\x12\x12\n\x08model_id\x18\
    \x02\x20\x01(\x03B\0\x12\x15\n\x0brun_options\x18\x03\x20\x01(\x0cB\0\
    \x12\"\n\x08in_nodes\x18\x04\x20\x03(\x0b2\x0e.vaccel.TFNodeB\0\x12&\n\n\
    in_tensors\x18\x05\x20\x03(\x0b2\x10.vaccel.TFTensorB\0\x12#\n\tout_node\
    s\x18\x06\x20\x03(\x0b2\x0e.vaccel.TFNodeB\0:\0\"<\n\x0fInferenceResult\
    \x12'\n\x0bout_tensors\x18\x01\x20\x03(\x0b2\x10.vaccel.TFTensorB\0:\0\"\
    }\n\x1aTensorflowModelRunResponse\x12&\n\x05error\x18\x01\x20\x01(\x0b2\
    \x13.vaccel.VaccelErrorH\0B\0\x12+\n\x06result\x18\x02\x20\x01(\x0b2\x17\
    .vaccel.InferenceResultH\0B\0B\x08\n\x06result:\0*\xad\x02\n\nTFDataType\
    \x12\n\n\x06UNUSED\x10\0\x12\t\n\x05FLOAT\x10\x01\x12\n\n\x06DOUBLE\x10\
    \x02\x12\t\n\x05INT32\x10\x03\x12\t\n\x05UINT8\x10\x04\x12\t\n\x05INT16\
    \x10\x05\x12\x08\n\x04INT8\x10\x06\x12\n\n\x06STRING\x10\x07\x12\x0b\n\
    \x07COMPLEX\x10\x08\x12\t\n\x05INT64\x10\t\x12\x08\n\x04BOOL\x10\n\x12\t\
    \n\x05QINT8\x10\x0b\x12\n\n\x06QUINT8\x10\x0c\x12\n\n\x06QINT32\x10\r\
    \x12\x0c\n\x08BFLOAT16\x10\x0e\x12\n\n\x06QINT16\x10\x0f\x12\x0b\n\x07QU\
    INT16\x10\x10\x12\n\n\x06UINT16\x10\x11\x12\x0e\n\nCOMPLEX128\x10\x12\
    \x12\x08\n\x04HALF\x10\x13\x12\x0c\n\x08RESOURCE\x10\x14\x12\x0b\n\x07VA\
    RIANT\x10\x15\x12\n\n\x06UINT32\x10\x16\x12\n\n\x06UINT64\x10\x17\x1a\0B\
    \0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
