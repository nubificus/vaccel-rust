// This file is generated by ttrpc-compiler 0.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clipto_camel_casepy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
use protobuf::{CodedInputStream, CodedOutputStream, Message};
use std::collections::HashMap;
use std::sync::Arc;

#[derive(Clone)]
pub struct VaccelAgentClient {
    client: ::ttrpc::Client,
}

impl VaccelAgentClient {
    pub fn new(client: ::ttrpc::Client) -> Self {
        VaccelAgentClient {
            client: client,
        }
    }

    pub fn create_session(&self, ctx: ttrpc::context::Context, req: &super::session::CreateSessionRequest) -> ::ttrpc::Result<super::session::CreateSessionResponse> {
        let mut cres = super::session::CreateSessionResponse::new();
        ::ttrpc::client_request!(self, ctx, req, "vaccel.VaccelAgent", "CreateSession", cres);
        Ok(cres)
    }

    pub fn destroy_session(&self, ctx: ttrpc::context::Context, req: &super::session::DestroySessionRequest) -> ::ttrpc::Result<super::agent::VaccelEmpty> {
        let mut cres = super::agent::VaccelEmpty::new();
        ::ttrpc::client_request!(self, ctx, req, "vaccel.VaccelAgent", "DestroySession", cres);
        Ok(cres)
    }

    pub fn create_resource(&self, ctx: ttrpc::context::Context, req: &super::resources::CreateResourceRequest) -> ::ttrpc::Result<super::resources::CreateResourceResponse> {
        let mut cres = super::resources::CreateResourceResponse::new();
        ::ttrpc::client_request!(self, ctx, req, "vaccel.VaccelAgent", "CreateResource", cres);
        Ok(cres)
    }

    pub fn register_resource(&self, ctx: ttrpc::context::Context, req: &super::resources::RegisterResourceRequest) -> ::ttrpc::Result<super::agent::VaccelEmpty> {
        let mut cres = super::agent::VaccelEmpty::new();
        ::ttrpc::client_request!(self, ctx, req, "vaccel.VaccelAgent", "RegisterResource", cres);
        Ok(cres)
    }

    pub fn unregister_resource(&self, ctx: ttrpc::context::Context, req: &super::resources::UnregisterResourceRequest) -> ::ttrpc::Result<super::agent::VaccelEmpty> {
        let mut cres = super::agent::VaccelEmpty::new();
        ::ttrpc::client_request!(self, ctx, req, "vaccel.VaccelAgent", "UnregisterResource", cres);
        Ok(cres)
    }

    pub fn destroy_resource(&self, ctx: ttrpc::context::Context, req: &super::resources::DestroyResourceRequest) -> ::ttrpc::Result<super::agent::VaccelEmpty> {
        let mut cres = super::agent::VaccelEmpty::new();
        ::ttrpc::client_request!(self, ctx, req, "vaccel.VaccelAgent", "DestroyResource", cres);
        Ok(cres)
    }

    pub fn image_classification(&self, ctx: ttrpc::context::Context, req: &super::image::ImageClassificationRequest) -> ::ttrpc::Result<super::image::ImageClassificationResponse> {
        let mut cres = super::image::ImageClassificationResponse::new();
        ::ttrpc::client_request!(self, ctx, req, "vaccel.VaccelAgent", "ImageClassification", cres);
        Ok(cres)
    }

    pub fn tensorflow_model_load(&self, ctx: ttrpc::context::Context, req: &super::tensorflow::TensorflowModelLoadRequest) -> ::ttrpc::Result<super::tensorflow::TensorflowModelLoadResponse> {
        let mut cres = super::tensorflow::TensorflowModelLoadResponse::new();
        ::ttrpc::client_request!(self, ctx, req, "vaccel.VaccelAgent", "TensorflowModelLoad", cres);
        Ok(cres)
    }

    pub fn tensorflow_model_run(&self, ctx: ttrpc::context::Context, req: &super::tensorflow::TensorflowModelRunRequest) -> ::ttrpc::Result<super::tensorflow::TensorflowModelRunResponse> {
        let mut cres = super::tensorflow::TensorflowModelRunResponse::new();
        ::ttrpc::client_request!(self, ctx, req, "vaccel.VaccelAgent", "TensorflowModelRun", cres);
        Ok(cres)
    }
}

struct CreateSessionMethod {
    service: Arc<std::boxed::Box<dyn VaccelAgent + Send + Sync>>,
}

impl ::ttrpc::MethodHandler for CreateSessionMethod {
    fn handler(&self, ctx: ::ttrpc::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<()> {
        ::ttrpc::request_handler!(self, ctx, req, session, CreateSessionRequest, create_session);
        Ok(())
    }
}

struct DestroySessionMethod {
    service: Arc<std::boxed::Box<dyn VaccelAgent + Send + Sync>>,
}

impl ::ttrpc::MethodHandler for DestroySessionMethod {
    fn handler(&self, ctx: ::ttrpc::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<()> {
        ::ttrpc::request_handler!(self, ctx, req, session, DestroySessionRequest, destroy_session);
        Ok(())
    }
}

struct CreateResourceMethod {
    service: Arc<std::boxed::Box<dyn VaccelAgent + Send + Sync>>,
}

impl ::ttrpc::MethodHandler for CreateResourceMethod {
    fn handler(&self, ctx: ::ttrpc::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<()> {
        ::ttrpc::request_handler!(self, ctx, req, resources, CreateResourceRequest, create_resource);
        Ok(())
    }
}

struct RegisterResourceMethod {
    service: Arc<std::boxed::Box<dyn VaccelAgent + Send + Sync>>,
}

impl ::ttrpc::MethodHandler for RegisterResourceMethod {
    fn handler(&self, ctx: ::ttrpc::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<()> {
        ::ttrpc::request_handler!(self, ctx, req, resources, RegisterResourceRequest, register_resource);
        Ok(())
    }
}

struct UnregisterResourceMethod {
    service: Arc<std::boxed::Box<dyn VaccelAgent + Send + Sync>>,
}

impl ::ttrpc::MethodHandler for UnregisterResourceMethod {
    fn handler(&self, ctx: ::ttrpc::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<()> {
        ::ttrpc::request_handler!(self, ctx, req, resources, UnregisterResourceRequest, unregister_resource);
        Ok(())
    }
}

struct DestroyResourceMethod {
    service: Arc<std::boxed::Box<dyn VaccelAgent + Send + Sync>>,
}

impl ::ttrpc::MethodHandler for DestroyResourceMethod {
    fn handler(&self, ctx: ::ttrpc::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<()> {
        ::ttrpc::request_handler!(self, ctx, req, resources, DestroyResourceRequest, destroy_resource);
        Ok(())
    }
}

struct ImageClassificationMethod {
    service: Arc<std::boxed::Box<dyn VaccelAgent + Send + Sync>>,
}

impl ::ttrpc::MethodHandler for ImageClassificationMethod {
    fn handler(&self, ctx: ::ttrpc::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<()> {
        ::ttrpc::request_handler!(self, ctx, req, image, ImageClassificationRequest, image_classification);
        Ok(())
    }
}

struct TensorflowModelLoadMethod {
    service: Arc<std::boxed::Box<dyn VaccelAgent + Send + Sync>>,
}

impl ::ttrpc::MethodHandler for TensorflowModelLoadMethod {
    fn handler(&self, ctx: ::ttrpc::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<()> {
        ::ttrpc::request_handler!(self, ctx, req, tensorflow, TensorflowModelLoadRequest, tensorflow_model_load);
        Ok(())
    }
}

struct TensorflowModelRunMethod {
    service: Arc<std::boxed::Box<dyn VaccelAgent + Send + Sync>>,
}

impl ::ttrpc::MethodHandler for TensorflowModelRunMethod {
    fn handler(&self, ctx: ::ttrpc::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<()> {
        ::ttrpc::request_handler!(self, ctx, req, tensorflow, TensorflowModelRunRequest, tensorflow_model_run);
        Ok(())
    }
}

pub trait VaccelAgent {
    fn create_session(&self, _ctx: &::ttrpc::TtrpcContext, _req: super::session::CreateSessionRequest) -> ::ttrpc::Result<super::session::CreateSessionResponse> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/vaccel.VaccelAgent/CreateSession is not supported".to_string())))
    }
    fn destroy_session(&self, _ctx: &::ttrpc::TtrpcContext, _req: super::session::DestroySessionRequest) -> ::ttrpc::Result<super::agent::VaccelEmpty> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/vaccel.VaccelAgent/DestroySession is not supported".to_string())))
    }
    fn create_resource(&self, _ctx: &::ttrpc::TtrpcContext, _req: super::resources::CreateResourceRequest) -> ::ttrpc::Result<super::resources::CreateResourceResponse> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/vaccel.VaccelAgent/CreateResource is not supported".to_string())))
    }
    fn register_resource(&self, _ctx: &::ttrpc::TtrpcContext, _req: super::resources::RegisterResourceRequest) -> ::ttrpc::Result<super::agent::VaccelEmpty> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/vaccel.VaccelAgent/RegisterResource is not supported".to_string())))
    }
    fn unregister_resource(&self, _ctx: &::ttrpc::TtrpcContext, _req: super::resources::UnregisterResourceRequest) -> ::ttrpc::Result<super::agent::VaccelEmpty> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/vaccel.VaccelAgent/UnregisterResource is not supported".to_string())))
    }
    fn destroy_resource(&self, _ctx: &::ttrpc::TtrpcContext, _req: super::resources::DestroyResourceRequest) -> ::ttrpc::Result<super::agent::VaccelEmpty> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/vaccel.VaccelAgent/DestroyResource is not supported".to_string())))
    }
    fn image_classification(&self, _ctx: &::ttrpc::TtrpcContext, _req: super::image::ImageClassificationRequest) -> ::ttrpc::Result<super::image::ImageClassificationResponse> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/vaccel.VaccelAgent/ImageClassification is not supported".to_string())))
    }
    fn tensorflow_model_load(&self, _ctx: &::ttrpc::TtrpcContext, _req: super::tensorflow::TensorflowModelLoadRequest) -> ::ttrpc::Result<super::tensorflow::TensorflowModelLoadResponse> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/vaccel.VaccelAgent/TensorflowModelLoad is not supported".to_string())))
    }
    fn tensorflow_model_run(&self, _ctx: &::ttrpc::TtrpcContext, _req: super::tensorflow::TensorflowModelRunRequest) -> ::ttrpc::Result<super::tensorflow::TensorflowModelRunResponse> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/vaccel.VaccelAgent/TensorflowModelRun is not supported".to_string())))
    }
}

pub fn create_vaccel_agent(service: Arc<std::boxed::Box<dyn VaccelAgent + Send + Sync>>) -> HashMap <String, Box<dyn ::ttrpc::MethodHandler + Send + Sync>> {
    let mut methods = HashMap::new();

    methods.insert("/vaccel.VaccelAgent/CreateSession".to_string(),
                    std::boxed::Box::new(CreateSessionMethod{service: service.clone()}) as std::boxed::Box<dyn ::ttrpc::MethodHandler + Send + Sync>);

    methods.insert("/vaccel.VaccelAgent/DestroySession".to_string(),
                    std::boxed::Box::new(DestroySessionMethod{service: service.clone()}) as std::boxed::Box<dyn ::ttrpc::MethodHandler + Send + Sync>);

    methods.insert("/vaccel.VaccelAgent/CreateResource".to_string(),
                    std::boxed::Box::new(CreateResourceMethod{service: service.clone()}) as std::boxed::Box<dyn ::ttrpc::MethodHandler + Send + Sync>);

    methods.insert("/vaccel.VaccelAgent/RegisterResource".to_string(),
                    std::boxed::Box::new(RegisterResourceMethod{service: service.clone()}) as std::boxed::Box<dyn ::ttrpc::MethodHandler + Send + Sync>);

    methods.insert("/vaccel.VaccelAgent/UnregisterResource".to_string(),
                    std::boxed::Box::new(UnregisterResourceMethod{service: service.clone()}) as std::boxed::Box<dyn ::ttrpc::MethodHandler + Send + Sync>);

    methods.insert("/vaccel.VaccelAgent/DestroyResource".to_string(),
                    std::boxed::Box::new(DestroyResourceMethod{service: service.clone()}) as std::boxed::Box<dyn ::ttrpc::MethodHandler + Send + Sync>);

    methods.insert("/vaccel.VaccelAgent/ImageClassification".to_string(),
                    std::boxed::Box::new(ImageClassificationMethod{service: service.clone()}) as std::boxed::Box<dyn ::ttrpc::MethodHandler + Send + Sync>);

    methods.insert("/vaccel.VaccelAgent/TensorflowModelLoad".to_string(),
                    std::boxed::Box::new(TensorflowModelLoadMethod{service: service.clone()}) as std::boxed::Box<dyn ::ttrpc::MethodHandler + Send + Sync>);

    methods.insert("/vaccel.VaccelAgent/TensorflowModelRun".to_string(),
                    std::boxed::Box::new(TensorflowModelRunMethod{service: service.clone()}) as std::boxed::Box<dyn ::ttrpc::MethodHandler + Send + Sync>);

    methods
}
