// This file is generated by ttrpc-compiler 0.3.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clipto_camel_casepy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
use protobuf::{CodedInputStream, CodedOutputStream, Message};
use std::collections::HashMap;
use std::sync::Arc;

#[derive(Clone)]
pub struct VaccelAgentClient {
    client: ::ttrpc::Client,
}

impl VaccelAgentClient {
    pub fn new(client: ::ttrpc::Client) -> Self {
        VaccelAgentClient {
            client: client,
        }
    }

    pub fn create_session(&self, req: &super::agent::CreateSessionRequest, timeout_nano: i64) -> ::ttrpc::Result<super::agent::CreateSessionResponse> {
        let mut cres = super::agent::CreateSessionResponse::new();
        ::ttrpc::client_request!(self, req, timeout_nano, "grpc.VaccelAgent", "CreateSession", cres);
        Ok(cres)
    }

    pub fn destroy_session(&self, req: &super::agent::DestroySessionRequest, timeout_nano: i64) -> ::ttrpc::Result<super::agent::VaccelEmpty> {
        let mut cres = super::agent::VaccelEmpty::new();
        ::ttrpc::client_request!(self, req, timeout_nano, "grpc.VaccelAgent", "DestroySession", cres);
        Ok(cres)
    }
}

struct CreateSessionMethod {
    service: Arc<std::boxed::Box<dyn VaccelAgent + Send + Sync>>,
}

impl ::ttrpc::MethodHandler for CreateSessionMethod {
    fn handler(&self, ctx: ::ttrpc::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<()> {
        ::ttrpc::request_handler!(self, ctx, req, agent, CreateSessionRequest, create_session);
        Ok(())
    }
}

struct DestroySessionMethod {
    service: Arc<std::boxed::Box<dyn VaccelAgent + Send + Sync>>,
}

impl ::ttrpc::MethodHandler for DestroySessionMethod {
    fn handler(&self, ctx: ::ttrpc::TtrpcContext, req: ::ttrpc::Request) -> ::ttrpc::Result<()> {
        ::ttrpc::request_handler!(self, ctx, req, agent, DestroySessionRequest, destroy_session);
        Ok(())
    }
}

pub trait VaccelAgent {
    fn create_session(&self, _ctx: &::ttrpc::TtrpcContext, _req: super::agent::CreateSessionRequest) -> ::ttrpc::Result<super::agent::CreateSessionResponse> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/grpc.VaccelAgent/CreateSession is not supported".to_string())))
    }
    fn destroy_session(&self, _ctx: &::ttrpc::TtrpcContext, _req: super::agent::DestroySessionRequest) -> ::ttrpc::Result<super::agent::VaccelEmpty> {
        Err(::ttrpc::Error::RpcStatus(::ttrpc::get_status(::ttrpc::Code::NOT_FOUND, "/grpc.VaccelAgent/DestroySession is not supported".to_string())))
    }
}

pub fn create_vaccel_agent(service: Arc<std::boxed::Box<dyn VaccelAgent + Send + Sync>>) -> HashMap <String, Box<dyn ::ttrpc::MethodHandler + Send + Sync>> {
    let mut methods = HashMap::new();

    methods.insert("/grpc.VaccelAgent/CreateSession".to_string(),
                    std::boxed::Box::new(CreateSessionMethod{service: service.clone()}) as std::boxed::Box<dyn ::ttrpc::MethodHandler + Send + Sync>);

    methods.insert("/grpc.VaccelAgent/DestroySession".to_string(),
                    std::boxed::Box::new(DestroySessionMethod{service: service.clone()}) as std::boxed::Box<dyn ::ttrpc::MethodHandler + Send + Sync>);

    methods
}
