// This file is generated by rust-protobuf 2.28.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `torch.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct TorchTensor {
    // message fields
    pub data: ::std::vec::Vec<u8>,
    pub dims: ::std::vec::Vec<u32>,
    pub field_type: TorchDataType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TorchTensor {
    fn default() -> &'a TorchTensor {
        <TorchTensor as ::protobuf::Message>::default_instance()
    }
}

impl TorchTensor {
    pub fn new() -> TorchTensor {
        ::std::default::Default::default()
    }

    // bytes data = 1;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // repeated uint32 dims = 2;


    pub fn get_dims(&self) -> &[u32] {
        &self.dims
    }
    pub fn clear_dims(&mut self) {
        self.dims.clear();
    }

    // Param is passed by value, moved
    pub fn set_dims(&mut self, v: ::std::vec::Vec<u32>) {
        self.dims = v;
    }

    // Mutable pointer to the field.
    pub fn mut_dims(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.dims
    }

    // Take field
    pub fn take_dims(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.dims, ::std::vec::Vec::new())
    }

    // .vaccel.TorchDataType type = 3;


    pub fn get_field_type(&self) -> TorchDataType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = TorchDataType::UNUSED;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: TorchDataType) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for TorchTensor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.dims)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        for value in &self.dims {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.field_type != TorchDataType::UNUSED {
            my_size += ::protobuf::rt::enum_size(3, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        for v in &self.dims {
            os.write_uint32(2, *v)?;
        };
        if self.field_type != TorchDataType::UNUSED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TorchTensor {
        TorchTensor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &TorchTensor| { &m.data },
                |m: &mut TorchTensor| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "dims",
                |m: &TorchTensor| { &m.dims },
                |m: &mut TorchTensor| { &mut m.dims },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TorchDataType>>(
                "type",
                |m: &TorchTensor| { &m.field_type },
                |m: &mut TorchTensor| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TorchTensor>(
                "TorchTensor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TorchTensor {
        static instance: ::protobuf::rt::LazyV2<TorchTensor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TorchTensor::new)
    }
}

impl ::protobuf::Clear for TorchTensor {
    fn clear(&mut self) {
        self.data.clear();
        self.dims.clear();
        self.field_type = TorchDataType::UNUSED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TorchTensor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TorchTensor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TorchJitloadForwardRequest {
    // message fields
    pub session_id: u32,
    pub model_id: i64,
    pub run_options: ::std::vec::Vec<u8>,
    pub in_tensors: ::protobuf::RepeatedField<TorchTensor>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TorchJitloadForwardRequest {
    fn default() -> &'a TorchJitloadForwardRequest {
        <TorchJitloadForwardRequest as ::protobuf::Message>::default_instance()
    }
}

impl TorchJitloadForwardRequest {
    pub fn new() -> TorchJitloadForwardRequest {
        ::std::default::Default::default()
    }

    // uint32 session_id = 1;


    pub fn get_session_id(&self) -> u32 {
        self.session_id
    }
    pub fn clear_session_id(&mut self) {
        self.session_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: u32) {
        self.session_id = v;
    }

    // int64 model_id = 2;


    pub fn get_model_id(&self) -> i64 {
        self.model_id
    }
    pub fn clear_model_id(&mut self) {
        self.model_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_model_id(&mut self, v: i64) {
        self.model_id = v;
    }

    // bytes run_options = 3;


    pub fn get_run_options(&self) -> &[u8] {
        &self.run_options
    }
    pub fn clear_run_options(&mut self) {
        self.run_options.clear();
    }

    // Param is passed by value, moved
    pub fn set_run_options(&mut self, v: ::std::vec::Vec<u8>) {
        self.run_options = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_run_options(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.run_options
    }

    // Take field
    pub fn take_run_options(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.run_options, ::std::vec::Vec::new())
    }

    // repeated .vaccel.TorchTensor in_tensors = 4;


    pub fn get_in_tensors(&self) -> &[TorchTensor] {
        &self.in_tensors
    }
    pub fn clear_in_tensors(&mut self) {
        self.in_tensors.clear();
    }

    // Param is passed by value, moved
    pub fn set_in_tensors(&mut self, v: ::protobuf::RepeatedField<TorchTensor>) {
        self.in_tensors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_in_tensors(&mut self) -> &mut ::protobuf::RepeatedField<TorchTensor> {
        &mut self.in_tensors
    }

    // Take field
    pub fn take_in_tensors(&mut self) -> ::protobuf::RepeatedField<TorchTensor> {
        ::std::mem::replace(&mut self.in_tensors, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TorchJitloadForwardRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.in_tensors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.session_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.model_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.run_options)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.in_tensors)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.session_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.session_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.model_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.model_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.run_options.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.run_options);
        }
        for value in &self.in_tensors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.session_id != 0 {
            os.write_uint32(1, self.session_id)?;
        }
        if self.model_id != 0 {
            os.write_int64(2, self.model_id)?;
        }
        if !self.run_options.is_empty() {
            os.write_bytes(3, &self.run_options)?;
        }
        for v in &self.in_tensors {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TorchJitloadForwardRequest {
        TorchJitloadForwardRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "session_id",
                |m: &TorchJitloadForwardRequest| { &m.session_id },
                |m: &mut TorchJitloadForwardRequest| { &mut m.session_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "model_id",
                |m: &TorchJitloadForwardRequest| { &m.model_id },
                |m: &mut TorchJitloadForwardRequest| { &mut m.model_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "run_options",
                |m: &TorchJitloadForwardRequest| { &m.run_options },
                |m: &mut TorchJitloadForwardRequest| { &mut m.run_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TorchTensor>>(
                "in_tensors",
                |m: &TorchJitloadForwardRequest| { &m.in_tensors },
                |m: &mut TorchJitloadForwardRequest| { &mut m.in_tensors },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TorchJitloadForwardRequest>(
                "TorchJitloadForwardRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TorchJitloadForwardRequest {
        static instance: ::protobuf::rt::LazyV2<TorchJitloadForwardRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TorchJitloadForwardRequest::new)
    }
}

impl ::protobuf::Clear for TorchJitloadForwardRequest {
    fn clear(&mut self) {
        self.session_id = 0;
        self.model_id = 0;
        self.run_options.clear();
        self.in_tensors.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TorchJitloadForwardRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TorchJitloadForwardRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TorchJitloadForwardResult {
    // message fields
    pub out_tensors: ::protobuf::RepeatedField<TorchTensor>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TorchJitloadForwardResult {
    fn default() -> &'a TorchJitloadForwardResult {
        <TorchJitloadForwardResult as ::protobuf::Message>::default_instance()
    }
}

impl TorchJitloadForwardResult {
    pub fn new() -> TorchJitloadForwardResult {
        ::std::default::Default::default()
    }

    // repeated .vaccel.TorchTensor out_tensors = 1;


    pub fn get_out_tensors(&self) -> &[TorchTensor] {
        &self.out_tensors
    }
    pub fn clear_out_tensors(&mut self) {
        self.out_tensors.clear();
    }

    // Param is passed by value, moved
    pub fn set_out_tensors(&mut self, v: ::protobuf::RepeatedField<TorchTensor>) {
        self.out_tensors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_out_tensors(&mut self) -> &mut ::protobuf::RepeatedField<TorchTensor> {
        &mut self.out_tensors
    }

    // Take field
    pub fn take_out_tensors(&mut self) -> ::protobuf::RepeatedField<TorchTensor> {
        ::std::mem::replace(&mut self.out_tensors, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TorchJitloadForwardResult {
    fn is_initialized(&self) -> bool {
        for v in &self.out_tensors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.out_tensors)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.out_tensors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.out_tensors {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TorchJitloadForwardResult {
        TorchJitloadForwardResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TorchTensor>>(
                "out_tensors",
                |m: &TorchJitloadForwardResult| { &m.out_tensors },
                |m: &mut TorchJitloadForwardResult| { &mut m.out_tensors },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TorchJitloadForwardResult>(
                "TorchJitloadForwardResult",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TorchJitloadForwardResult {
        static instance: ::protobuf::rt::LazyV2<TorchJitloadForwardResult> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TorchJitloadForwardResult::new)
    }
}

impl ::protobuf::Clear for TorchJitloadForwardResult {
    fn clear(&mut self) {
        self.out_tensors.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TorchJitloadForwardResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TorchJitloadForwardResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TorchJitloadForwardResponse {
    // message oneof groups
    pub result: ::std::option::Option<TorchJitloadForwardResponse_oneof_result>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TorchJitloadForwardResponse {
    fn default() -> &'a TorchJitloadForwardResponse {
        <TorchJitloadForwardResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum TorchJitloadForwardResponse_oneof_result {
    error(super::error::VaccelError),
    result(TorchJitloadForwardResult),
}

impl TorchJitloadForwardResponse {
    pub fn new() -> TorchJitloadForwardResponse {
        ::std::default::Default::default()
    }

    // .vaccel.VaccelError error = 1;


    pub fn get_error(&self) -> &super::error::VaccelError {
        match self.result {
            ::std::option::Option::Some(TorchJitloadForwardResponse_oneof_result::error(ref v)) => v,
            _ => <super::error::VaccelError as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_error(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(TorchJitloadForwardResponse_oneof_result::error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: super::error::VaccelError) {
        self.result = ::std::option::Option::Some(TorchJitloadForwardResponse_oneof_result::error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_error(&mut self) -> &mut super::error::VaccelError {
        if let ::std::option::Option::Some(TorchJitloadForwardResponse_oneof_result::error(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(TorchJitloadForwardResponse_oneof_result::error(super::error::VaccelError::new()));
        }
        match self.result {
            ::std::option::Option::Some(TorchJitloadForwardResponse_oneof_result::error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_error(&mut self) -> super::error::VaccelError {
        if self.has_error() {
            match self.result.take() {
                ::std::option::Option::Some(TorchJitloadForwardResponse_oneof_result::error(v)) => v,
                _ => panic!(),
            }
        } else {
            super::error::VaccelError::new()
        }
    }

    // .vaccel.TorchJitloadForwardResult result = 2;


    pub fn get_result(&self) -> &TorchJitloadForwardResult {
        match self.result {
            ::std::option::Option::Some(TorchJitloadForwardResponse_oneof_result::result(ref v)) => v,
            _ => <TorchJitloadForwardResult as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(TorchJitloadForwardResponse_oneof_result::result(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: TorchJitloadForwardResult) {
        self.result = ::std::option::Option::Some(TorchJitloadForwardResponse_oneof_result::result(v))
    }

    // Mutable pointer to the field.
    pub fn mut_result(&mut self) -> &mut TorchJitloadForwardResult {
        if let ::std::option::Option::Some(TorchJitloadForwardResponse_oneof_result::result(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(TorchJitloadForwardResponse_oneof_result::result(TorchJitloadForwardResult::new()));
        }
        match self.result {
            ::std::option::Option::Some(TorchJitloadForwardResponse_oneof_result::result(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_result(&mut self) -> TorchJitloadForwardResult {
        if self.has_result() {
            match self.result.take() {
                ::std::option::Option::Some(TorchJitloadForwardResponse_oneof_result::result(v)) => v,
                _ => panic!(),
            }
        } else {
            TorchJitloadForwardResult::new()
        }
    }
}

impl ::protobuf::Message for TorchJitloadForwardResponse {
    fn is_initialized(&self) -> bool {
        if let Some(TorchJitloadForwardResponse_oneof_result::error(ref v)) = self.result {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TorchJitloadForwardResponse_oneof_result::result(ref v)) = self.result {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = ::std::option::Option::Some(TorchJitloadForwardResponse_oneof_result::error(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = ::std::option::Option::Some(TorchJitloadForwardResponse_oneof_result::result(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &TorchJitloadForwardResponse_oneof_result::error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TorchJitloadForwardResponse_oneof_result::result(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &TorchJitloadForwardResponse_oneof_result::error(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TorchJitloadForwardResponse_oneof_result::result(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TorchJitloadForwardResponse {
        TorchJitloadForwardResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::error::VaccelError>(
                "error",
                TorchJitloadForwardResponse::has_error,
                TorchJitloadForwardResponse::get_error,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TorchJitloadForwardResult>(
                "result",
                TorchJitloadForwardResponse::has_result,
                TorchJitloadForwardResponse::get_result,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TorchJitloadForwardResponse>(
                "TorchJitloadForwardResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TorchJitloadForwardResponse {
        static instance: ::protobuf::rt::LazyV2<TorchJitloadForwardResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TorchJitloadForwardResponse::new)
    }
}

impl ::protobuf::Clear for TorchJitloadForwardResponse {
    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TorchJitloadForwardResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TorchJitloadForwardResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TorchDataType {
    UNUSED = 0,
    UInt8 = 1,
    Int8 = 2,
    Int16 = 3,
    Int32 = 4,
    Int64 = 5,
    Half = 6,
    FLOAT = 7,
}

impl ::protobuf::ProtobufEnum for TorchDataType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TorchDataType> {
        match value {
            0 => ::std::option::Option::Some(TorchDataType::UNUSED),
            1 => ::std::option::Option::Some(TorchDataType::UInt8),
            2 => ::std::option::Option::Some(TorchDataType::Int8),
            3 => ::std::option::Option::Some(TorchDataType::Int16),
            4 => ::std::option::Option::Some(TorchDataType::Int32),
            5 => ::std::option::Option::Some(TorchDataType::Int64),
            6 => ::std::option::Option::Some(TorchDataType::Half),
            7 => ::std::option::Option::Some(TorchDataType::FLOAT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TorchDataType] = &[
            TorchDataType::UNUSED,
            TorchDataType::UInt8,
            TorchDataType::Int8,
            TorchDataType::Int16,
            TorchDataType::Int32,
            TorchDataType::Int64,
            TorchDataType::Half,
            TorchDataType::FLOAT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TorchDataType>("TorchDataType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TorchDataType {
}

impl ::std::default::Default for TorchDataType {
    fn default() -> Self {
        TorchDataType::UNUSED
    }
}

impl ::protobuf::reflect::ProtobufValue for TorchDataType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0btorch.proto\x12\x06vaccel\x1a\x0berror.proto\"h\n\x0bTorchTensor\
    \x12\x14\n\x04data\x18\x01\x20\x01(\x0cR\x04dataB\0\x12\x14\n\x04dims\
    \x18\x02\x20\x03(\rR\x04dimsB\0\x12+\n\x04type\x18\x03\x20\x01(\x0e2\x15\
    .vaccel.TorchDataTypeR\x04typeB\0:\0\"\xb5\x01\n\x1aTorchJitloadForwardR\
    equest\x12\x1f\n\nsession_id\x18\x01\x20\x01(\rR\tsessionIdB\0\x12\x1b\n\
    \x08model_id\x18\x02\x20\x01(\x03R\x07modelIdB\0\x12!\n\x0brun_options\
    \x18\x03\x20\x01(\x0cR\nrunOptionsB\0\x124\n\nin_tensors\x18\x04\x20\x03\
    (\x0b2\x13.vaccel.TorchTensorR\tinTensorsB\0:\0\"U\n\x19TorchJitloadForw\
    ardResult\x126\n\x0bout_tensors\x18\x01\x20\x03(\x0b2\x13.vaccel.TorchTe\
    nsorR\noutTensorsB\0:\0\"\x97\x01\n\x1bTorchJitloadForwardResponse\x12-\
    \n\x05error\x18\x01\x20\x01(\x0b2\x13.vaccel.VaccelErrorH\0R\x05errorB\0\
    \x12=\n\x06result\x18\x02\x20\x01(\x0b2!.vaccel.TorchJitloadForwardResul\
    tH\0R\x06resultB\0B\x08\n\x06result:\0*h\n\rTorchDataType\x12\n\n\x06UNU\
    SED\x10\0\x12\t\n\x05UInt8\x10\x01\x12\x08\n\x04Int8\x10\x02\x12\t\n\x05\
    Int16\x10\x03\x12\t\n\x05Int32\x10\x04\x12\t\n\x05Int64\x10\x05\x12\x08\
    \n\x04Half\x10\x06\x12\t\n\x05FLOAT\x10\x07\x1a\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
