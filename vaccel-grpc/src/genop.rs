// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `genop.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:vaccel.GenopArg)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GenopArg {
    // message fields
    // @@protoc_insertion_point(field:vaccel.GenopArg.argtype)
    pub argtype: u32,
    // @@protoc_insertion_point(field:vaccel.GenopArg.size)
    pub size: u32,
    // @@protoc_insertion_point(field:vaccel.GenopArg.buf)
    pub buf: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:vaccel.GenopArg.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenopArg {
    fn default() -> &'a GenopArg {
        <GenopArg as ::protobuf::Message>::default_instance()
    }
}

impl GenopArg {
    pub fn new() -> GenopArg {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "argtype",
            |m: &GenopArg| { &m.argtype },
            |m: &mut GenopArg| { &mut m.argtype },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "size",
            |m: &GenopArg| { &m.size },
            |m: &mut GenopArg| { &mut m.size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "buf",
            |m: &GenopArg| { &m.buf },
            |m: &mut GenopArg| { &mut m.buf },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenopArg>(
            "GenopArg",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenopArg {
    const NAME: &'static str = "GenopArg";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.argtype = is.read_uint32()?;
                },
                16 => {
                    self.size = is.read_uint32()?;
                },
                26 => {
                    self.buf = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.argtype != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.argtype);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.size);
        }
        if !self.buf.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.buf);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.argtype != 0 {
            os.write_uint32(1, self.argtype)?;
        }
        if self.size != 0 {
            os.write_uint32(2, self.size)?;
        }
        if !self.buf.is_empty() {
            os.write_bytes(3, &self.buf)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenopArg {
        GenopArg::new()
    }

    fn clear(&mut self) {
        self.argtype = 0;
        self.size = 0;
        self.buf.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenopArg {
        static instance: GenopArg = GenopArg {
            argtype: 0,
            size: 0,
            buf: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenopArg {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenopArg").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenopArg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenopArg {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:vaccel.GenopRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GenopRequest {
    // message fields
    // @@protoc_insertion_point(field:vaccel.GenopRequest.session_id)
    pub session_id: u32,
    // @@protoc_insertion_point(field:vaccel.GenopRequest.read_args)
    pub read_args: ::std::vec::Vec<GenopArg>,
    // @@protoc_insertion_point(field:vaccel.GenopRequest.write_args)
    pub write_args: ::std::vec::Vec<GenopArg>,
    // special fields
    // @@protoc_insertion_point(special_field:vaccel.GenopRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenopRequest {
    fn default() -> &'a GenopRequest {
        <GenopRequest as ::protobuf::Message>::default_instance()
    }
}

impl GenopRequest {
    pub fn new() -> GenopRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "session_id",
            |m: &GenopRequest| { &m.session_id },
            |m: &mut GenopRequest| { &mut m.session_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "read_args",
            |m: &GenopRequest| { &m.read_args },
            |m: &mut GenopRequest| { &mut m.read_args },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "write_args",
            |m: &GenopRequest| { &m.write_args },
            |m: &mut GenopRequest| { &mut m.write_args },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenopRequest>(
            "GenopRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenopRequest {
    const NAME: &'static str = "GenopRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.session_id = is.read_uint32()?;
                },
                18 => {
                    self.read_args.push(is.read_message()?);
                },
                26 => {
                    self.write_args.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.session_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.session_id);
        }
        for value in &self.read_args {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.write_args {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.session_id != 0 {
            os.write_uint32(1, self.session_id)?;
        }
        for v in &self.read_args {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        for v in &self.write_args {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenopRequest {
        GenopRequest::new()
    }

    fn clear(&mut self) {
        self.session_id = 0;
        self.read_args.clear();
        self.write_args.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenopRequest {
        static instance: GenopRequest = GenopRequest {
            session_id: 0,
            read_args: ::std::vec::Vec::new(),
            write_args: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenopRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenopRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenopRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenopRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:vaccel.GenopResult)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GenopResult {
    // message fields
    // @@protoc_insertion_point(field:vaccel.GenopResult.write_args)
    pub write_args: ::std::vec::Vec<GenopArg>,
    // special fields
    // @@protoc_insertion_point(special_field:vaccel.GenopResult.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenopResult {
    fn default() -> &'a GenopResult {
        <GenopResult as ::protobuf::Message>::default_instance()
    }
}

impl GenopResult {
    pub fn new() -> GenopResult {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "write_args",
            |m: &GenopResult| { &m.write_args },
            |m: &mut GenopResult| { &mut m.write_args },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenopResult>(
            "GenopResult",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenopResult {
    const NAME: &'static str = "GenopResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.write_args.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.write_args {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.write_args {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenopResult {
        GenopResult::new()
    }

    fn clear(&mut self) {
        self.write_args.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenopResult {
        static instance: GenopResult = GenopResult {
            write_args: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenopResult {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenopResult").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenopResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenopResult {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:vaccel.GenopResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GenopResponse {
    // message oneof groups
    pub result: ::std::option::Option<genop_response::Result>,
    // special fields
    // @@protoc_insertion_point(special_field:vaccel.GenopResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenopResponse {
    fn default() -> &'a GenopResponse {
        <GenopResponse as ::protobuf::Message>::default_instance()
    }
}

impl GenopResponse {
    pub fn new() -> GenopResponse {
        ::std::default::Default::default()
    }

    // .vaccel.VaccelError error = 1;

    pub fn error(&self) -> &super::error::VaccelError {
        match self.result {
            ::std::option::Option::Some(genop_response::Result::Error(ref v)) => v,
            _ => <super::error::VaccelError as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_error(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(genop_response::Result::Error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: super::error::VaccelError) {
        self.result = ::std::option::Option::Some(genop_response::Result::Error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_error(&mut self) -> &mut super::error::VaccelError {
        if let ::std::option::Option::Some(genop_response::Result::Error(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(genop_response::Result::Error(super::error::VaccelError::new()));
        }
        match self.result {
            ::std::option::Option::Some(genop_response::Result::Error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_error(&mut self) -> super::error::VaccelError {
        if self.has_error() {
            match self.result.take() {
                ::std::option::Option::Some(genop_response::Result::Error(v)) => v,
                _ => panic!(),
            }
        } else {
            super::error::VaccelError::new()
        }
    }

    // .vaccel.GenopResult result = 2;

    pub fn result(&self) -> &GenopResult {
        match self.result {
            ::std::option::Option::Some(genop_response::Result::Result(ref v)) => v,
            _ => <GenopResult as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(genop_response::Result::Result(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: GenopResult) {
        self.result = ::std::option::Option::Some(genop_response::Result::Result(v))
    }

    // Mutable pointer to the field.
    pub fn mut_result(&mut self) -> &mut GenopResult {
        if let ::std::option::Option::Some(genop_response::Result::Result(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(genop_response::Result::Result(GenopResult::new()));
        }
        match self.result {
            ::std::option::Option::Some(genop_response::Result::Result(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_result(&mut self) -> GenopResult {
        if self.has_result() {
            match self.result.take() {
                ::std::option::Option::Some(genop_response::Result::Result(v)) => v,
                _ => panic!(),
            }
        } else {
            GenopResult::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::error::VaccelError>(
            "error",
            GenopResponse::has_error,
            GenopResponse::error,
            GenopResponse::mut_error,
            GenopResponse::set_error,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, GenopResult>(
            "result",
            GenopResponse::has_result,
            GenopResponse::result,
            GenopResponse::mut_result,
            GenopResponse::set_result,
        ));
        oneofs.push(genop_response::Result::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenopResponse>(
            "GenopResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenopResponse {
    const NAME: &'static str = "GenopResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.result = ::std::option::Option::Some(genop_response::Result::Error(is.read_message()?));
                },
                18 => {
                    self.result = ::std::option::Option::Some(genop_response::Result::Result(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &genop_response::Result::Error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &genop_response::Result::Result(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &genop_response::Result::Error(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &genop_response::Result::Result(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenopResponse {
        GenopResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenopResponse {
        static instance: GenopResponse = GenopResponse {
            result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenopResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenopResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenopResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenopResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `GenopResponse`
pub mod genop_response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:vaccel.GenopResponse.result)
    pub enum Result {
        // @@protoc_insertion_point(oneof_field:vaccel.GenopResponse.error)
        Error(super::super::error::VaccelError),
        // @@protoc_insertion_point(oneof_field:vaccel.GenopResponse.result)
        Result(super::GenopResult),
    }

    impl ::protobuf::Oneof for Result {
    }

    impl ::protobuf::OneofFull for Result {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::GenopResponse as ::protobuf::MessageFull>::descriptor().oneof_by_name("result").unwrap()).clone()
        }
    }

    impl Result {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Result>("result")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bgenop.proto\x12\x06vaccel\x1a\x0berror.proto\"J\n\x08GenopArg\x12\
    \x18\n\x07argtype\x18\x01\x20\x01(\rR\x07argtype\x12\x12\n\x04size\x18\
    \x02\x20\x01(\rR\x04size\x12\x10\n\x03buf\x18\x03\x20\x01(\x0cR\x03buf\"\
    \x8d\x01\n\x0cGenopRequest\x12\x1d\n\nsession_id\x18\x01\x20\x01(\rR\tse\
    ssionId\x12-\n\tread_args\x18\x02\x20\x03(\x0b2\x10.vaccel.GenopArgR\x08\
    readArgs\x12/\n\nwrite_args\x18\x03\x20\x03(\x0b2\x10.vaccel.GenopArgR\t\
    writeArgs\">\n\x0bGenopResult\x12/\n\nwrite_args\x18\x01\x20\x03(\x0b2\
    \x10.vaccel.GenopArgR\twriteArgs\"u\n\rGenopResponse\x12+\n\x05error\x18\
    \x01\x20\x01(\x0b2\x13.vaccel.VaccelErrorH\0R\x05error\x12-\n\x06result\
    \x18\x02\x20\x01(\x0b2\x13.vaccel.GenopResultH\0R\x06resultB\x08\n\x06re\
    sultb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::error::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(GenopArg::generated_message_descriptor_data());
            messages.push(GenopRequest::generated_message_descriptor_data());
            messages.push(GenopResult::generated_message_descriptor_data());
            messages.push(GenopResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
