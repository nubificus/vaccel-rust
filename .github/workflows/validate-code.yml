name: Validate Source Code

on:
  workflow_call:
    inputs:
      actions-repo:
        type: string
        default: 'nubificus/vaccel'
      actions-rev:
        type: string
        default: 'main'
      runner:
        type: string
        default: '["rust", "dind", "2204"]'
      runner-archs:
        type: string
        default: '["amd64"]'
      runner-arch-map:
        type: string
        default: '[{"amd64":"x86_64", "arm64":"aarch64", "arm":"armv7l"}]'
      clippy-features:
        type: string
        default: 'async,async-stream'
    secrets:
      GIT_CLONE_PAT:
        required: false
      AWS_ACCESS_KEY:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false

jobs:
  linter-rust-clippy:
    name: Lint Rust (rust-clippy)
    runs-on: ${{ format('{0}-{1}', join(fromJSON(inputs.runner), '-'), matrix.arch) }}
    strategy:
      matrix:
        arch: ["${{ fromJSON(inputs.runner-archs) }}"]
        build-type: [release]
      fail-fast: false
    permissions:
      contents: read
      pull-requests: write
    env:
      ARCH: ${{ fromJson(inputs.runner-arch-map)[0][matrix.arch] }}
      DOWNLOAD_PATH: ${{github.workspace}}/artifacts/downloads/${{fromJson(inputs.runner-arch-map)[0][matrix.arch]}}/${{matrix.build-type}}
      CC: gcc-12
      CXX: g++-12
    steps:
      - name: Checkout .github directory
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github
          repository: ${{ inputs.actions-repo }}
          ref: ${{ inputs.actions-rev }}

      - name: Initialize workspace
        id: initialize-workspace
        uses: ./.github/actions/initialize-workspace
        with:
          fetch-depth: 0
          remote-actions-repo: ${{ inputs.actions-repo }}
          token: ${{ secrets.GIT_CLONE_PAT || github.token }}

      # FIXME: Temp
      - name: Install libcurl & stb
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libstb-dev
        shell: bash

      - name: Download artifacts from s3
        id: download-artifacts
        if: ${{ inputs.actions-repo != github.repository }}
        uses: ./.github/actions/download-from-s3
        with:
          branch: ${{ steps.initialize-workspace.outputs.remote-branch }}
          build-type: ${{ matrix.build-type }}
          arch: ${{ env.ARCH }}
          access-key: ${{ secrets.AWS_ACCESS_KEY }}
          secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          local-path: ${{ env.DOWNLOAD_PATH }}
          install: 'true'

      - name: Run rust-clippy
        run: |
          cargo clippy --workspace --all-targets
          cargo clippy --workspace --all-targets --all-features
          IFS=','
          features=${{ inputs.clippy-features }}
          for f in $features; do
            cargo clippy --workspace --all-targets --features "$f"
          done
        shell: bash

      - name: Clean-up
        if: ${{ always() }}
        run: |
          sudo apt-get purge -y \
            ${{ steps.download-artifacts.outputs.installed }} || echo
        shell: bash

  linter-rust-fmt:
    name: Lint Rust (rust-fmt)
    runs-on: ${{ format('{0}-{1}', join(fromJSON(inputs.runner), '-'), matrix.arch) }}
    strategy:
      matrix:
        arch: ["${{ fromJSON(inputs.runner-archs) }}"]
        build-type: [release]
      fail-fast: false
    permissions:
      contents: read
      pull-requests: write
    env:
      CC: gcc-12
      CXX: g++-12
    steps:
      - name: Checkout .github directory
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github
          repository: ${{ inputs.actions-repo }}
          ref: ${{ inputs.actions-rev }}

      - name: Initialize workspace
        id: initialize-workspace
        uses: ./.github/actions/initialize-workspace
        with:
          fetch-depth: 0
          remote-actions-repo: ${{ inputs.actions-repo }}
          token: ${{ secrets.GIT_CLONE_PAT || github.token }}

      - name: Run rust-fmt
        run: cargo fmt --all --check
        shell: bash

  linter-super-linter:
    name: Lint Shell/GHActions/Markdown/YAML
    runs-on: ${{ format('{0}-{1}', join(fromJSON(inputs.runner), '-'), matrix.arch) }}
    strategy:
      matrix:
        arch: ["${{ fromJSON(inputs.runner-archs) }}"]
        build-type: [release]
      fail-fast: false
    permissions:
      contents: read
      packages: read
      statuses: write
    steps:
      - name: Checkout .github directory
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github
          repository: ${{ inputs.actions-repo }}
          ref: ${{ inputs.actions-rev }}

      - name: Initialize workspace
        id: initialize-workspace
        uses: ./.github/actions/initialize-workspace
        with:
          fetch-depth: 0
          remote-actions-repo: ${{ inputs.actions-repo }}
          token: ${{ secrets.GIT_CLONE_PAT || github.token }}

      - name: Run super-linter
        uses: super-linter/super-linter@v7
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_GITHUB_ACTIONS_STEP_SUMMARY: false
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_BASH: true
          VALIDATE_SHELL_SHFMT: true
          VALIDATE_GITHUB_ACTIONS: true
          VALIDATE_MARKDOWN: true
          VALIDATE_YAML: true
