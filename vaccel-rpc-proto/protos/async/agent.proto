// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

import "empty.proto";
import "genop.proto";
import "image.proto";
import "profiling.proto";
import "resource.proto";
import "session.proto";
import "tf.proto";
import "tflite.proto";
import "torch.proto";

package vaccel.asynchronous.agent;

service AgentService {
        // Session
        rpc CreateSession(vaccel.session.CreateRequest) returns (vaccel.session.CreateResponse);
        rpc UpdateSession(vaccel.session.UpdateRequest) returns (vaccel.empty.Empty);
        rpc DestroySession(vaccel.session.DestroyRequest) returns (vaccel.empty.Empty);

        // Resource
        rpc RegisterResource(vaccel.resource.RegisterRequest) returns (vaccel.resource.RegisterResponse);
        rpc UnregisterResource(vaccel.resource.UnregisterRequest) returns (vaccel.empty.Empty);
	rpc SyncResource(vaccel.resource.SyncRequest) returns (vaccel.resource.SyncResponse);

        // Image
        rpc ImageClassification(vaccel.image.Request) returns (vaccel.image.Response);

        // Tensorflow
        rpc TensorflowModelLoad(vaccel.tf.ModelLoadRequest) returns (vaccel.tf.ModelLoadResponse);
        rpc TensorflowModelUnload(vaccel.tf.ModelUnloadRequest) returns (vaccel.tf.ModelUnloadResponse);
        rpc TensorflowModelRun(vaccel.tf.ModelRunRequest) returns (vaccel.tf.ModelRunResponse);

        // TensorFlow Lite
        rpc TensorflowLiteModelLoad(vaccel.tflite.ModelLoadRequest) returns (vaccel.empty.Empty);
        rpc TensorflowLiteModelUnload(vaccel.tflite.ModelUnloadRequest) returns (vaccel.empty.Empty);
        rpc TensorflowLiteModelRun(vaccel.tflite.ModelRunRequest) returns (vaccel.tflite.ModelRunResponse);

        rpc TorchModelLoad(vaccel.torch.ModelLoadRequest) returns (vaccel.empty.Empty);
        rpc TorchModelRun(vaccel.torch.ModelRunRequest) returns (vaccel.torch.ModelRunResponse);

        // Generic Operation
        rpc Genop(vaccel.genop.Request) returns (vaccel.genop.Response);
        rpc GenopStream(stream vaccel.genop.Request) returns (vaccel.genop.Response);

        // Profiling
        rpc GetProfiler(vaccel.profiling.Request) returns (vaccel.profiling.Response);
}
