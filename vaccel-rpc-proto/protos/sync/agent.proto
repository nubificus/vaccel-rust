// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

import "session.proto";
import "resource.proto";
import "image.proto";
import "tensorflow.proto";
import "torch.proto";
import "genop.proto";
import "profiling.proto";

package vaccel;

service RpcAgent {
	// Session handling
	rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
	rpc UpdateSession(UpdateSessionRequest) returns (VaccelEmpty);
	rpc DestroySession(DestroySessionRequest) returns (VaccelEmpty);

	// vAccel resource handling
	rpc RegisterResource(RegisterResourceRequest) returns (RegisterResourceResponse);
	rpc UnregisterResource(UnregisterResourceRequest) returns (VaccelEmpty);

	// Image Classification API
	rpc ImageClassification(ImageClassificationRequest) returns (ImageClassificationResponse);

	// TensorFlow inference API
	rpc TensorflowModelLoad(TensorflowModelLoadRequest) returns (TensorflowModelLoadResponse);
	rpc TensorflowModelUnload(TensorflowModelUnloadRequest) returns (TensorflowModelUnloadResponse);
	rpc TensorflowModelRun(TensorflowModelRunRequest) returns (TensorflowModelRunResponse);

	// TensorFlow Lite inference API
	rpc TensorflowLiteModelLoad(TensorflowLiteModelLoadRequest) returns (TensorflowLiteModelLoadResponse);
	rpc TensorflowLiteModelUnload(TensorflowLiteModelUnloadRequest) returns (TensorflowLiteModelUnloadResponse);
	rpc TensorflowLiteModelRun(TensorflowLiteModelRunRequest) returns (TensorflowLiteModelRunResponse);

	// PyTorch inference API
	//rpc TorchModelLoad(TorchModelLoadRequest) returns (TorchModelLoadResponse);
	//rpc TorchModelUnload(TorchModelUnloadRequest) returns (TorchModelUnloadResponse);
	rpc TorchJitloadForward(TorchJitloadForwardRequest) returns (TorchJitloadForwardResponse);

	// Generic Operation API
	rpc Genop(GenopRequest) returns (GenopResponse);

	// Profiling Operation API
	rpc GetTimers(ProfilingRequest) returns (ProfilingResponse);
}

message VaccelEmpty {}
